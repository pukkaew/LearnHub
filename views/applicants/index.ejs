<%- include('../layouts/header') %>

<div class="bg-gradient-to-br from-ruxchai-main/5 to-ruxchai-secondary/5 min-h-screen">
    <div class="container mx-auto px-6 py-8">
        <!-- Header Section -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div class="mb-4 md:mb-0">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">ระบบทดสอบผู้สมัครงาน</h1>
                <p class="text-gray-600">จัดการข้อสอบและประเมินผลผู้สมัครงาน</p>
            </div>
            <div class="flex space-x-3">
                <button id="createTestBtn" class="bg-ruxchai-main text-white px-6 py-3 rounded-lg hover:bg-ruxchai-main/90 transition-colors shadow-md">
                    <i class="fas fa-plus mr-2"></i>สร้างข้อสอบใหม่
                </button>
                <button id="manageApplicantsBtn" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors shadow-md">
                    <i class="fas fa-users mr-2"></i>จัดการผู้สมัคร
                </button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-blue-100 p-3 rounded-lg">
                        <i class="fas fa-file-alt text-blue-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500">ข้อสอบทั้งหมด</h3>
                        <p id="totalTests" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-green-100 p-3 rounded-lg">
                        <i class="fas fa-user-check text-green-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500">ผู้สมัครทั้งหมด</h3>
                        <p id="totalApplicants" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-yellow-100 p-3 rounded-lg">
                        <i class="fas fa-clock text-yellow-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500">รอการทดสอบ</h3>
                        <p id="pendingTests" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-purple-100 p-3 rounded-lg">
                        <i class="fas fa-award text-purple-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500">ผ่านการทดสอบ</h3>
                        <p id="passedTests" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab Navigation -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-8">
            <div class="border-b border-gray-200">
                <nav class="flex space-x-8 px-6">
                    <button class="tab-btn active py-4 px-2 border-b-2 border-ruxchai-main text-ruxchai-main font-medium" data-tab="tests">
                        <i class="fas fa-file-alt mr-2"></i>ข้อสอบ
                    </button>
                    <button class="tab-btn py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-tab="positions">
                        <i class="fas fa-briefcase mr-2"></i>ตำแหน่งงาน
                    </button>
                    <button class="tab-btn py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-tab="applicants">
                        <i class="fas fa-users mr-2"></i>ผู้สมัคร
                    </button>
                    <button class="tab-btn py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-tab="results">
                        <i class="fas fa-chart-bar mr-2"></i>ผลการทดสอบ
                    </button>
                </nav>
            </div>

            <!-- Tests Tab -->
            <div id="testsTab" class="tab-content p-6">
                <!-- Filters -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div class="relative">
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        <input type="text" id="searchTests" placeholder="ค้นหาข้อสอบ..."
                               class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                    <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">สถานะทั้งหมด</option>
                        <option value="active">เปิดใช้งาน</option>
                        <option value="inactive">ปิดใช้งาน</option>
                        <option value="draft">ร่าง</option>
                    </select>
                    <select id="positionFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">ตำแหน่งทั้งหมด</option>
                        <!-- Positions will be loaded dynamically -->
                    </select>
                    <select id="sortTests" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="latest">ล่าสุด</option>
                        <option value="name_asc">ชื่อ A-Z</option>
                        <option value="name_desc">ชื่อ Z-A</option>
                        <option value="most_used">ใช้มากที่สุด</option>
                    </select>
                </div>

                <!-- Tests Grid -->
                <div id="testsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Tests will be loaded here -->
                </div>
            </div>

            <!-- Positions Tab -->
            <div id="positionsTab" class="tab-content p-6 hidden">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-lg font-medium text-gray-900">ตำแหน่งงาน</h3>
                    <button id="addPositionBtn" class="bg-ruxchai-main text-white px-4 py-2 rounded-lg hover:bg-ruxchai-main/90 transition-colors">
                        <i class="fas fa-plus mr-2"></i>เพิ่มตำแหน่ง
                    </button>
                </div>

                <div id="positionsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Positions will be loaded here -->
                </div>
            </div>

            <!-- Applicants Tab -->
            <div id="applicantsTab" class="tab-content p-6 hidden">
                <!-- Filters -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div class="relative">
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        <input type="text" id="searchApplicants" placeholder="ค้นหาผู้สมัคร..."
                               class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                    <select id="applicantStatusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">สถานะทั้งหมด</option>
                        <option value="pending">รอการทดสอบ</option>
                        <option value="testing">กำลังทดสอบ</option>
                        <option value="completed">ทดสอบเสร็จแล้ว</option>
                        <option value="passed">ผ่าน</option>
                        <option value="failed">ไม่ผ่าน</option>
                    </select>
                    <select id="applicantPositionFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">ตำแหน่งทั้งหมด</option>
                    </select>
                    <select id="sortApplicants" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="latest">ล่าสุด</option>
                        <option value="name_asc">ชื่อ A-Z</option>
                        <option value="score_desc">คะแนนสูงสุด</option>
                        <option value="score_asc">คะแนนต่ำสุด</option>
                    </select>
                </div>

                <!-- Applicants Table -->
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50 border-b border-gray-200">
                            <tr>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">ผู้สมัคร</th>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">ตำแหน่งที่สมัคร</th>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">สถานะ</th>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">คะแนน</th>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">วันที่ทดสอบ</th>
                                <th class="p-4 text-left text-sm font-medium text-gray-900">การจัดการ</th>
                            </tr>
                        </thead>
                        <tbody id="applicantsTableBody" class="divide-y divide-gray-200">
                            <!-- Applicants will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Results Tab -->
            <div id="resultsTab" class="tab-content p-6 hidden">
                <!-- Chart Controls -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <select id="chartType" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="pass_rate">อัตราผ่าน</option>
                        <option value="score_distribution">การกระจายคะแนน</option>
                        <option value="position_stats">สถิติตามตำแหน่ง</option>
                        <option value="monthly_trend">แนวโน้มรายเดือน</option>
                    </select>
                    <select id="chartPosition" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">ตำแหน่งทั้งหมด</option>
                    </select>
                    <select id="chartPeriod" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="30">30 วันล่าสุด</option>
                        <option value="90">90 วันล่าสุด</option>
                        <option value="180">6 เดือนล่าสุด</option>
                        <option value="365">1 ปีล่าสุด</option>
                    </select>
                </div>

                <!-- Chart Container -->
                <div class="bg-white border border-gray-200 rounded-lg p-6 mb-6">
                    <canvas id="resultsChart" width="400" height="200"></canvas>
                </div>

                <!-- Summary Stats -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-green-800 mb-2">อัตราผ่านโดยรวม</h4>
                        <p id="overallPassRate" class="text-2xl font-bold text-green-900">0%</p>
                    </div>
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-blue-800 mb-2">คะแนนเฉลี่ย</h4>
                        <p id="averageScore" class="text-2xl font-bold text-blue-900">0</p>
                    </div>
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-yellow-800 mb-2">เวลาทำข้อสอบเฉลี่ย</h4>
                        <p id="averageTime" class="text-2xl font-bold text-yellow-900">0 นาที</p>
                    </div>
                    <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-purple-800 mb-2">ข้อสอบยอดนิยม</h4>
                        <p id="popularTest" class="text-sm font-medium text-purple-900">-</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Test Modal -->
<div id="createTestModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-xl font-bold text-gray-900">สร้างข้อสอบใหม่</h3>
                <button id="closeCreateTestModal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="createTestForm" class="p-6 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">ชื่อข้อสอบ *</label>
                        <input type="text" name="title" required
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">ตำแหน่งงาน *</label>
                        <select name="position_id" required
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                            <option value="">เลือกตำแหน่ง</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">ระยะเวลาทำข้อสอบ (นาที) *</label>
                        <input type="number" name="time_limit" required min="1" max="480" value="60"
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">คะแนนผ่าน *</label>
                        <input type="number" name="passing_score" required min="0" max="100" value="70"
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">จำนวนครั้งที่ทำได้</label>
                        <input type="number" name="max_attempts" min="1" max="10" value="1"
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">คำอธิบาย</label>
                    <textarea name="description" rows="3"
                              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent"
                              placeholder="อธิบายข้อสอบ เช่น วัตถุประสงค์ หัวข้อที่ครอบคลุม..."></textarea>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">คำแนะนำสำหรับผู้สมัคร</label>
                    <textarea name="instructions" rows="3"
                              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent"
                              placeholder="คำแนะนำและข้อปฏิบัติในการทำข้อสอบ..."></textarea>
                </div>

                <div class="flex items-center space-x-6">
                    <label class="flex items-center">
                        <input type="checkbox" name="randomize_questions" class="rounded border-gray-300 text-ruxchai-main focus:ring-ruxchai-main mr-2">
                        <span class="text-sm text-gray-700">สุ่มลำดับข้อคำถาม</span>
                    </label>
                    <label class="flex items-center">
                        <input type="checkbox" name="show_results" class="rounded border-gray-300 text-ruxchai-main focus:ring-ruxchai-main mr-2">
                        <span class="text-sm text-gray-700">แสดงผลทันทีหลังทำข้อสอบ</span>
                    </label>
                </div>

                <div class="flex justify-end space-x-3 pt-4 border-t">
                    <button type="button" id="cancelCreateTest" class="px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        ยกเลิก
                    </button>
                    <button type="submit" class="px-6 py-2 bg-ruxchai-main text-white rounded-lg hover:bg-ruxchai-main/90">
                        สร้างข้อสอบ
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Position Modal -->
<div id="addPositionModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-lg w-full">
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-xl font-bold text-gray-900">เพิ่มตำแหน่งงาน</h3>
                <button id="closeAddPositionModal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="addPositionForm" class="p-6 space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">ชื่อตำแหน่ง *</label>
                    <input type="text" name="title" required
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">แผนก *</label>
                    <select name="department_id" required
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent">
                        <option value="">เลือกแผนก</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">คำอธิบายงาน</label>
                    <textarea name="description" rows="4"
                              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent"
                              placeholder="อธิบายลักษณะงาน หน้าที่ความรับผิดชอบ..."></textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">คุณสมบัติที่ต้องการ</label>
                    <textarea name="requirements" rows="3"
                              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-main focus:border-transparent"
                              placeholder="ระบุคุณสมบัติ ทักษะ ประสบการณ์ที่ต้องการ..."></textarea>
                </div>

                <div class="flex justify-end space-x-3 pt-4 border-t">
                    <button type="button" id="cancelAddPosition" class="px-6 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        ยกเลิก
                    </button>
                    <button type="submit" class="px-6 py-2 bg-ruxchai-main text-white rounded-lg hover:bg-ruxchai-main/90">
                        เพิ่มตำแหน่ง
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
// Global variables
let currentTab = 'tests';
let tests = [];
let positions = [];
let applicants = [];
let resultsChart = null;

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadStats();
    loadTests();
    loadPositions();
    loadDepartments();
    setupEventListeners();
});

// Event listeners
function setupEventListeners() {
    // Tab navigation
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            switchTab(e.target.dataset.tab);
        });
    });

    // Create test modal
    document.getElementById('createTestBtn').addEventListener('click', () => {
        document.getElementById('createTestModal').classList.remove('hidden');
    });

    document.getElementById('closeCreateTestModal').addEventListener('click', closeCreateTestModal);
    document.getElementById('cancelCreateTest').addEventListener('click', closeCreateTestModal);
    document.getElementById('createTestForm').addEventListener('submit', handleCreateTest);

    // Add position modal
    document.getElementById('addPositionBtn').addEventListener('click', () => {
        document.getElementById('addPositionModal').classList.remove('hidden');
    });

    document.getElementById('closeAddPositionModal').addEventListener('click', closeAddPositionModal);
    document.getElementById('cancelAddPosition').addEventListener('click', closeAddPositionModal);
    document.getElementById('addPositionForm').addEventListener('submit', handleAddPosition);

    // Filters and search
    document.getElementById('searchTests').addEventListener('input', debounce(loadTests, 300));
    document.getElementById('statusFilter').addEventListener('change', loadTests);
    document.getElementById('positionFilter').addEventListener('change', loadTests);
    document.getElementById('sortTests').addEventListener('change', loadTests);

    document.getElementById('searchApplicants').addEventListener('input', debounce(loadApplicants, 300));
    document.getElementById('applicantStatusFilter').addEventListener('change', loadApplicants);
    document.getElementById('applicantPositionFilter').addEventListener('change', loadApplicants);
    document.getElementById('sortApplicants').addEventListener('change', loadApplicants);

    // Chart controls
    document.getElementById('chartType').addEventListener('change', updateChart);
    document.getElementById('chartPosition').addEventListener('change', updateChart);
    document.getElementById('chartPeriod').addEventListener('change', updateChart);

    // Other buttons
    document.getElementById('manageApplicantsBtn').addEventListener('click', () => {
        switchTab('applicants');
    });
}

// Switch tabs
function switchTab(tab) {
    currentTab = tab;

    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active', 'border-ruxchai-main', 'text-ruxchai-main');
        btn.classList.add('border-transparent', 'text-gray-500');
    });

    document.querySelector(`[data-tab="${tab}"]`).classList.add('active', 'border-ruxchai-main', 'text-ruxchai-main');
    document.querySelector(`[data-tab="${tab}"]`).classList.remove('border-transparent', 'text-gray-500');

    // Show/hide tab content
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
    });

    document.getElementById(`${tab}Tab`).classList.remove('hidden');

    // Load data for active tab
    switch (tab) {
        case 'tests':
            loadTests();
            break;
        case 'positions':
            loadPositions();
            break;
        case 'applicants':
            loadApplicants();
            break;
        case 'results':
            loadResults();
            break;
    }
}

// Load statistics
async function loadStats() {
    try {
        const response = await fetch('/applicants/api/stats');
        const data = await response.json();

        if (data.success) {
            document.getElementById('totalTests').textContent = data.stats.total_tests || 0;
            document.getElementById('totalApplicants').textContent = data.stats.total_applicants || 0;
            document.getElementById('pendingTests').textContent = data.stats.pending_tests || 0;
            document.getElementById('passedTests').textContent = data.stats.passed_tests || 0;
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

// Load tests
async function loadTests() {
    try {
        const search = document.getElementById('searchTests').value;
        const status = document.getElementById('statusFilter').value;
        const position = document.getElementById('positionFilter').value;
        const sort = document.getElementById('sortTests').value;

        const params = new URLSearchParams({ search, status, position, sort });
        const response = await fetch(`/applicants/api/tests?${params}`);
        const data = await response.json();

        if (data.success) {
            tests = data.tests;
            displayTests();
        }
    } catch (error) {
        console.error('Error loading tests:', error);
    }
}

// Display tests
function displayTests() {
    const container = document.getElementById('testsGrid');

    if (tests.length === 0) {
        container.innerHTML = '<div class="col-span-full text-center py-8 text-gray-500">ไม่พบข้อสอบ</div>';
        return;
    }

    container.innerHTML = tests.map(test => createTestCard(test)).join('');
}

// Create test card
function createTestCard(test) {
    const statusBadge = getTestStatusBadge(test.status);

    return `
        <div class="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-medium text-gray-900 mb-2">${test.title}</h3>
                ${statusBadge}
            </div>

            <div class="space-y-2 text-sm text-gray-600 mb-4">
                <div class="flex items-center">
                    <i class="fas fa-briefcase mr-2 text-gray-400"></i>
                    <span>${test.position_title || 'ไม่ระบุตำแหน่ง'}</span>
                </div>
                <div class="flex items-center">
                    <i class="fas fa-clock mr-2 text-gray-400"></i>
                    <span>${test.time_limit} นาที</span>
                </div>
                <div class="flex items-center">
                    <i class="fas fa-percentage mr-2 text-gray-400"></i>
                    <span>คะแนนผ่าน ${test.passing_score}%</span>
                </div>
                <div class="flex items-center">
                    <i class="fas fa-users mr-2 text-gray-400"></i>
                    <span>${test.applicant_count || 0} คนทำข้อสอบ</span>
                </div>
            </div>

            <p class="text-sm text-gray-600 mb-4 line-clamp-2">${test.description || 'ไม่มีคำอธิบาย'}</p>

            <div class="flex justify-between items-center">
                <span class="text-xs text-gray-500">สร้างเมื่อ ${formatDate(test.created_at)}</span>
                <div class="flex space-x-2">
                    <button onclick="editTest(${test.test_id})" class="text-blue-600 hover:text-blue-800 p-1" title="แก้ไข">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="manageQuestions(${test.test_id})" class="text-green-600 hover:text-green-800 p-1" title="จัดการคำถาม">
                        <i class="fas fa-list"></i>
                    </button>
                    <button onclick="viewTestResults(${test.test_id})" class="text-purple-600 hover:text-purple-800 p-1" title="ดูผลการทดสอบ">
                        <i class="fas fa-chart-bar"></i>
                    </button>
                    <button onclick="toggleTestStatus(${test.test_id})"
                            class="${test.status === 'active' ? 'text-red-600 hover:text-red-800' : 'text-green-600 hover:text-green-800'} p-1"
                            title="${test.status === 'active' ? 'ปิดใช้งาน' : 'เปิดใช้งาน'}">
                        <i class="fas ${test.status === 'active' ? 'fa-pause' : 'fa-play'}"></i>
                    </button>
                    <button onclick="deleteTest(${test.test_id})" class="text-red-600 hover:text-red-800 p-1" title="ลบ">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Load positions
async function loadPositions() {
    try {
        const response = await fetch('/applicants/api/positions');
        const data = await response.json();

        if (data.success) {
            positions = data.positions;
            displayPositions();
            updatePositionFilters();
        }
    } catch (error) {
        console.error('Error loading positions:', error);
    }
}

// Display positions
function displayPositions() {
    const container = document.getElementById('positionsGrid');

    if (positions.length === 0) {
        container.innerHTML = '<div class="col-span-full text-center py-8 text-gray-500">ยังไม่มีตำแหน่งงาน</div>';
        return;
    }

    container.innerHTML = positions.map(position => createPositionCard(position)).join('');
}

// Create position card
function createPositionCard(position) {
    return `
        <div class="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-medium text-gray-900">${position.title}</h3>
                <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                    ${position.test_count || 0} ข้อสอบ
                </span>
            </div>

            <div class="space-y-2 text-sm text-gray-600 mb-4">
                <div class="flex items-center">
                    <i class="fas fa-building mr-2 text-gray-400"></i>
                    <span>${position.department_name || 'ไม่ระบุแผนก'}</span>
                </div>
                <div class="flex items-center">
                    <i class="fas fa-users mr-2 text-gray-400"></i>
                    <span>${position.applicant_count || 0} ผู้สมัคร</span>
                </div>
            </div>

            <p class="text-sm text-gray-600 mb-4 line-clamp-3">${position.description || 'ไม่มีคำอธิบาย'}</p>

            <div class="flex justify-between items-center">
                <span class="text-xs text-gray-500">สร้างเมื่อ ${formatDate(position.created_at)}</span>
                <div class="flex space-x-2">
                    <button onclick="editPosition(${position.position_id})" class="text-blue-600 hover:text-blue-800 p-1" title="แก้ไข">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button onclick="viewPositionApplicants(${position.position_id})" class="text-green-600 hover:text-green-800 p-1" title="ดูผู้สมัคร">
                        <i class="fas fa-users"></i>
                    </button>
                    <button onclick="deletePosition(${position.position_id})" class="text-red-600 hover:text-red-800 p-1" title="ลบ">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Load applicants
async function loadApplicants() {
    try {
        const search = document.getElementById('searchApplicants').value;
        const status = document.getElementById('applicantStatusFilter').value;
        const position = document.getElementById('applicantPositionFilter').value;
        const sort = document.getElementById('sortApplicants').value;

        const params = new URLSearchParams({ search, status, position, sort });
        const response = await fetch(`/applicants/api/list?${params}`);
        const data = await response.json();

        if (data.success) {
            applicants = data.applicants;
            displayApplicants();
        }
    } catch (error) {
        console.error('Error loading applicants:', error);
    }
}

// Display applicants
function displayApplicants() {
    const tbody = document.getElementById('applicantsTableBody');

    if (applicants.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="p-8 text-center text-gray-500">ไม่พบผู้สมัคร</td></tr>';
        return;
    }

    tbody.innerHTML = applicants.map(applicant => createApplicantRow(applicant)).join('');
}

// Create applicant row
function createApplicantRow(applicant) {
    const statusBadge = getApplicantStatusBadge(applicant.status);

    return `
        <tr class="hover:bg-gray-50">
            <td class="p-4">
                <div class="flex items-center space-x-3">
                    <img src="${applicant.profile_image || '/images/default-avatar.png'}"
                         alt="${applicant.first_name} ${applicant.last_name}" class="w-10 h-10 rounded-full">
                    <div>
                        <p class="font-medium text-gray-900">${applicant.first_name} ${applicant.last_name}</p>
                        <p class="text-sm text-gray-500">${applicant.email}</p>
                    </div>
                </div>
            </td>
            <td class="p-4">
                <span class="text-sm text-gray-900">${applicant.position_title}</span>
            </td>
            <td class="p-4">${statusBadge}</td>
            <td class="p-4">
                <span class="text-sm font-medium ${applicant.score >= applicant.passing_score ? 'text-green-600' : 'text-red-600'}">
                    ${applicant.score !== null ? `${applicant.score}%` : '-'}
                </span>
            </td>
            <td class="p-4">
                <span class="text-sm text-gray-900">${applicant.test_date ? formatDate(applicant.test_date) : '-'}</span>
            </td>
            <td class="p-4">
                <div class="flex space-x-2">
                    <button onclick="viewApplicant(${applicant.applicant_id})" class="text-blue-600 hover:text-blue-800 p-1" title="ดูรายละเอียด">
                        <i class="fas fa-eye"></i>
                    </button>
                    ${applicant.status === 'pending' ? `
                        <button onclick="sendTestInvitation(${applicant.applicant_id})" class="text-green-600 hover:text-green-800 p-1" title="ส่งการทดสอบ">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    ` : ''}
                    ${applicant.test_result_id ? `
                        <button onclick="viewTestResult(${applicant.test_result_id})" class="text-purple-600 hover:text-purple-800 p-1" title="ดูผลการทดสอบ">
                            <i class="fas fa-chart-bar"></i>
                        </button>
                    ` : ''}
                </div>
            </td>
        </tr>
    `;
}

// Load departments
async function loadDepartments() {
    try {
        const response = await fetch('/departments/api/list');
        const data = await response.json();

        if (data.success) {
            const departmentSelect = document.querySelector('select[name="department_id"]');
            departmentSelect.innerHTML = '<option value="">เลือกแผนก</option>' +
                data.departments.map(dept => `<option value="${dept.department_id}">${dept.name}</option>`).join('');
        }
    } catch (error) {
        console.error('Error loading departments:', error);
    }
}

// Update position filters
function updatePositionFilters() {
    const positionFilters = [
        document.getElementById('positionFilter'),
        document.getElementById('applicantPositionFilter'),
        document.getElementById('chartPosition'),
        document.querySelector('select[name="position_id"]')
    ];

    positionFilters.forEach(select => {
        if (select) {
            const isCreateForm = select.name === 'position_id';
            select.innerHTML = (isCreateForm ? '<option value="">เลือกตำแหน่ง</option>' : '<option value="">ตำแหน่งทั้งหมด</option>') +
                positions.map(pos => `<option value="${pos.position_id}">${pos.title}</option>`).join('');
        }
    });
}

// Handle create test
async function handleCreateTest(e) {
    e.preventDefault();

    try {
        const formData = new FormData(e.target);

        const response = await fetch('/applicants/tests/create', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showMessage('สร้างข้อสอบเรียบร้อยแล้ว', 'success');
            closeCreateTestModal();
            loadTests();
            loadStats();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error creating test:', error);
        showMessage('เกิดข้อผิดพลาดในการสร้างข้อสอบ', 'error');
    }
}

// Handle add position
async function handleAddPosition(e) {
    e.preventDefault();

    try {
        const formData = new FormData(e.target);

        const response = await fetch('/applicants/positions/create', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showMessage('เพิ่มตำแหน่งเรียบร้อยแล้ว', 'success');
            closeAddPositionModal();
            loadPositions();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error adding position:', error);
        showMessage('เกิดข้อผิดพลาดในการเพิ่มตำแหน่ง', 'error');
    }
}

// Test management functions
function editTest(testId) {
    window.location.href = `/applicants/tests/${testId}/edit`;
}

function manageQuestions(testId) {
    window.location.href = `/applicants/tests/${testId}/questions`;
}

function viewTestResults(testId) {
    window.location.href = `/applicants/tests/${testId}/results`;
}

async function toggleTestStatus(testId) {
    try {
        const response = await fetch(`/applicants/tests/${testId}/toggle-status`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showMessage(`${data.status === 'active' ? 'เปิด' : 'ปิด'}ใช้งานข้อสอบเรียบร้อยแล้ว`, 'success');
            loadTests();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error toggling test status:', error);
        showMessage('เกิดข้อผิดพลาด', 'error');
    }
}

async function deleteTest(testId) {
    if (!confirm('คุณแน่ใจหรือไม่ที่จะลบข้อสอบนี้? การกระทำนี้ไม่สามารถยกเลิกได้')) return;

    try {
        const response = await fetch(`/applicants/tests/${testId}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            showMessage('ลบข้อสอบเรียบร้อยแล้ว', 'success');
            loadTests();
            loadStats();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error deleting test:', error);
        showMessage('เกิดข้อผิดพลาด', 'error');
    }
}

// Position management functions
function editPosition(positionId) {
    // Implementation for editing position
}

function viewPositionApplicants(positionId) {
    document.getElementById('applicantPositionFilter').value = positionId;
    switchTab('applicants');
    loadApplicants();
}

async function deletePosition(positionId) {
    if (!confirm('คุณแน่ใจหรือไม่ที่จะลบตำแหน่งนี้? การกระทำนี้ไม่สามารถยกเลิกได้')) return;

    try {
        const response = await fetch(`/applicants/positions/${positionId}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            showMessage('ลบตำแหน่งเรียบร้อยแล้ว', 'success');
            loadPositions();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error deleting position:', error);
        showMessage('เกิดข้อผิดพลาด', 'error');
    }
}

// Applicant management functions
function viewApplicant(applicantId) {
    window.location.href = `/applicants/${applicantId}`;
}

async function sendTestInvitation(applicantId) {
    try {
        const response = await fetch(`/applicants/${applicantId}/send-test`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showMessage('ส่งการทดสอบเรียบร้อยแล้ว', 'success');
            loadApplicants();
        } else {
            showMessage(data.message || 'เกิดข้อผิดพลาด', 'error');
        }
    } catch (error) {
        console.error('Error sending test invitation:', error);
        showMessage('เกิดข้อผิดพลาด', 'error');
    }
}

function viewTestResult(resultId) {
    window.location.href = `/applicants/results/${resultId}`;
}

// Load and update chart
async function loadResults() {
    await updateChart();
    await loadResultsStats();
}

async function updateChart() {
    try {
        const chartType = document.getElementById('chartType').value;
        const position = document.getElementById('chartPosition').value;
        const period = document.getElementById('chartPeriod').value;

        const params = new URLSearchParams({ type: chartType, position, period });
        const response = await fetch(`/applicants/api/chart-data?${params}`);
        const data = await response.json();

        if (data.success) {
            drawChart(data.chartData, chartType);
        }
    } catch (error) {
        console.error('Error loading chart data:', error);
    }
}

function drawChart(data, type) {
    const ctx = document.getElementById('resultsChart').getContext('2d');

    if (resultsChart) {
        resultsChart.destroy();
    }

    resultsChart = new Chart(ctx, {
        type: getChartType(type),
        data: data,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                }
            }
        }
    });
}

function getChartType(type) {
    switch (type) {
        case 'pass_rate':
        case 'position_stats':
            return 'bar';
        case 'score_distribution':
            return 'line';
        case 'monthly_trend':
            return 'line';
        default:
            return 'bar';
    }
}

async function loadResultsStats() {
    try {
        const response = await fetch('/applicants/api/results-stats');
        const data = await response.json();

        if (data.success) {
            document.getElementById('overallPassRate').textContent = `${data.stats.pass_rate || 0}%`;
            document.getElementById('averageScore').textContent = data.stats.average_score || 0;
            document.getElementById('averageTime').textContent = `${data.stats.average_time || 0} นาที`;
            document.getElementById('popularTest').textContent = data.stats.popular_test || '-';
        }
    } catch (error) {
        console.error('Error loading results stats:', error);
    }
}

// Status badges
function getTestStatusBadge(status) {
    const badges = {
        active: '<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">เปิดใช้งาน</span>',
        inactive: '<span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">ปิดใช้งาน</span>',
        draft: '<span class="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">ร่าง</span>'
    };
    return badges[status] || '';
}

function getApplicantStatusBadge(status) {
    const badges = {
        pending: '<span class="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">รอการทดสอบ</span>',
        testing: '<span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">กำลังทดสอบ</span>',
        completed: '<span class="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">ทดสอบเสร็จแล้ว</span>',
        passed: '<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">ผ่าน</span>',
        failed: '<span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">ไม่ผ่าน</span>'
    };
    return badges[status] || '';
}

// Close modals
function closeCreateTestModal() {
    document.getElementById('createTestModal').classList.add('hidden');
    document.getElementById('createTestForm').reset();
}

function closeAddPositionModal() {
    document.getElementById('addPositionModal').classList.add('hidden');
    document.getElementById('addPositionForm').reset();
}

// Utility functions
function formatDate(dateString) {
    const options = {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    };
    return new Date(dateString).toLocaleDateString('th-TH', options);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function showMessage(message, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white ${
        type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    messageDiv.textContent = message;

    document.body.appendChild(messageDiv);

    setTimeout(() => {
        messageDiv.remove();
    }, 3000);
}

// Add CSS for line clamp
const style = document.createElement('style');
style.textContent = `
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
`;
document.head.appendChild(style);
</script>

<%- include('../layouts/footer') %>