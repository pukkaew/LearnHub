<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Certifications Report</h1>
                <p class="text-gray-600 mt-2">Track certification achievements, progress, and validation status</p>
            </div>
            <div class="flex space-x-3">
                <select id="date-range" class="border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="30">Last 30 days</option>
                    <option value="90" selected>Last 90 days</option>
                    <option value="180">Last 6 months</option>
                    <option value="365">Last year</option>
                    <option value="all">All time</option>
                </select>
                <button onclick="bulkValidateCertificates()" class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700">
                    <i class="fas fa-shield-alt mr-2"></i>Bulk Validate
                </button>
                <button onclick="exportCertifications()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                    <i class="fas fa-download mr-2"></i>Export
                </button>
            </div>
        </div>
    </div>

    <!-- Certification Overview Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                    <i class="fas fa-certificate text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Total Certificates</p>
                    <p class="text-2xl font-semibold text-gray-900" id="total-certificates">0</p>
                    <p class="text-xs text-green-600 mt-1">
                        <i class="fas fa-arrow-up"></i>
                        <span id="certificates-trend">+24</span> this month
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-600">
                    <i class="fas fa-check-circle text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Validated Certificates</p>
                    <p class="text-2xl font-semibold text-gray-900" id="validated-certificates">0</p>
                    <p class="text-xs text-green-600 mt-1">
                        <i class="fas fa-arrow-up"></i>
                        <span id="validated-trend">98.5%</span> validation rate
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                    <i class="fas fa-clock text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Pending Validation</p>
                    <p class="text-2xl font-semibold text-gray-900" id="pending-certificates">0</p>
                    <p class="text-xs text-yellow-600 mt-1">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span id="pending-trend">Requires attention</span>
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                    <i class="fas fa-calendar-check text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Avg Completion Time</p>
                    <p class="text-2xl font-semibold text-gray-900" id="avg-completion-time">0d</p>
                    <p class="text-xs text-green-600 mt-1">
                        <i class="fas fa-arrow-down"></i>
                        <span id="completion-trend">-2 days</span> vs last period
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions & Filters -->
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Filters & Actions</h3>
            <div class="flex space-x-2">
                <button onclick="generateCertificateReport()" class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700">
                    <i class="fas fa-chart-bar mr-1"></i>Generate Report
                </button>
                <button onclick="scheduleReminders()" class="bg-orange-600 text-white px-3 py-1 rounded text-sm hover:bg-orange-700">
                    <i class="fas fa-bell mr-1"></i>Schedule Reminders
                </button>
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
                <label for="course-filter" class="block text-sm font-medium text-gray-700 mb-2">Course</label>
                <select id="course-filter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="">All Courses</option>
                </select>
            </div>
            <div>
                <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select id="status-filter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="">All Status</option>
                    <option value="issued">Issued</option>
                    <option value="validated">Validated</option>
                    <option value="pending">Pending Validation</option>
                    <option value="revoked">Revoked</option>
                    <option value="expired">Expired</option>
                </select>
            </div>
            <div>
                <label for="department-filter" class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                <select id="department-filter" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="">All Departments</option>
                    <option value="IT">Information Technology</option>
                    <option value="HR">Human Resources</option>
                    <option value="Finance">Finance</option>
                    <option value="Marketing">Marketing</option>
                    <option value="Operations">Operations</option>
                </select>
            </div>
            <div>
                <label for="certificate-type" class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                <select id="certificate-type" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="">All Types</option>
                    <option value="course_completion">Course Completion</option>
                    <option value="skill_mastery">Skill Mastery</option>
                    <option value="professional">Professional</option>
                    <option value="compliance">Compliance</option>
                </select>
            </div>
            <div>
                <label for="search-certificates" class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                <input type="text" id="search-certificates" placeholder="User or certificate..."
                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
            </div>
        </div>
        <div class="flex justify-end mt-4 space-x-3">
            <button onclick="clearAllFilters()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                Clear All
            </button>
            <button onclick="applyFilters()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                Apply Filters
            </button>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <!-- Certification Trends -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Certification Trends</h3>
            <canvas id="trendsChart" width="400" height="200"></canvas>
        </div>

        <!-- Certificate Distribution by Type -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Certificates by Type</h3>
            <canvas id="typeChart" width="400" height="200"></canvas>
        </div>

        <!-- Department Performance -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Department Performance</h3>
            <canvas id="departmentChart" width="400" height="200"></canvas>
        </div>

        <!-- Certificate Validation Status -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Validation Status Overview</h3>
            <canvas id="validationChart" width="400" height="200"></canvas>
        </div>
    </div>

    <!-- Top Performers & Popular Certifications -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <!-- Top Certificate Earners -->
        <div class="bg-white rounded-lg shadow-sm">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Top Certificate Earners</h3>
                <p class="text-sm text-gray-600">Users with most certifications earned</p>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Rank</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">User</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Certificates</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Latest</th>
                        </tr>
                    </thead>
                    <tbody id="top-earners-table" class="divide-y divide-gray-200">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Most Popular Certifications -->
        <div class="bg-white rounded-lg shadow-sm">
            <div class="p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Most Popular Certifications</h3>
                <p class="text-sm text-gray-600">Certificates with highest enrollment</p>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Certificate</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Earned</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">In Progress</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Success Rate</th>
                        </tr>
                    </thead>
                    <tbody id="popular-certificates-table" class="divide-y divide-gray-200">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Certification Details Table -->
    <div class="bg-white rounded-lg shadow-sm">
        <div class="p-6 border-b border-gray-200">
            <div class="flex justify-between items-center">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Certificate Registry</h3>
                    <p class="text-sm text-gray-600">Complete list of all certificates with validation status</p>
                </div>
                <div class="flex space-x-2">
                    <button onclick="selectAll()" class="text-sm text-blue-600 hover:text-blue-800">Select All</button>
                    <span class="text-gray-300">|</span>
                    <button onclick="deselectAll()" class="text-sm text-blue-600 hover:text-blue-800">Deselect All</button>
                </div>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left">
                            <input type="checkbox" id="select-all-checkbox" class="rounded border-gray-300">
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('user')">
                            User <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('course')">
                            Certificate <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('type')">
                            Type <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('issued_date')">
                            Issued Date <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('expiry_date')">
                            Expiry Date <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer" onclick="sortCertificates('status')">
                            Status <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody id="certificates-table" class="bg-white divide-y divide-gray-200">
                    <!-- Dynamic content -->
                </tbody>
            </table>
        </div>
        <div class="px-6 py-3 border-t border-gray-200">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-3">
                    <span class="text-sm text-gray-700">
                        Showing <span id="showing-from">1</span> to <span id="showing-to">20</span> of <span id="total-certificates-count">0</span> certificates
                    </span>
                    <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-500">Selected:</span>
                        <span class="text-sm font-medium text-blue-600" id="selected-count">0</span>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button onclick="previousPage()" class="px-3 py-1 border border-gray-300 rounded text-sm hover:bg-gray-50" id="prev-btn" disabled>
                        Previous
                    </button>
                    <span class="px-3 py-1 text-sm">Page <span id="current-page">1</span> of <span id="total-pages">1</span></span>
                    <button onclick="nextPage()" class="px-3 py-1 border border-gray-300 rounded text-sm hover:bg-gray-50" id="next-btn">
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Certificate Validation Modal -->
<div id="validation-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-semibold text-gray-900">Certificate Validation</h3>
                    <button onclick="closeValidationModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div id="validation-content">
                    <!-- Validation form will be populated here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Certificate Preview Modal -->
<div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-semibold text-gray-900">Certificate Preview</h3>
                    <div class="flex space-x-2">
                        <button onclick="downloadCertificate()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-download mr-2"></i>Download
                        </button>
                        <button onclick="closeCertificatePreview()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="p-6">
                <div id="certificate-preview-content">
                    <!-- Certificate preview will be populated here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6">
        <div class="flex items-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span class="ml-3">Loading certifications data...</span>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let certificationsData = {};
let charts = {};
let currentPage = 1;
let itemsPerPage = 20;
let sortField = 'issued_date';
let sortDirection = 'desc';
let currentFilters = {};
let selectedCertificates = new Set();
let currentCertificateId = null;

document.addEventListener('DOMContentLoaded', function() {
    loadCertificationsData();

    // Event listeners
    document.getElementById('date-range').addEventListener('change', loadCertificationsData);
    document.getElementById('search-certificates').addEventListener('input', debounce(applyFilters, 500));
    document.getElementById('select-all-checkbox').addEventListener('change', handleSelectAll);
});

async function loadCertificationsData() {
    showLoading(true);

    try {
        const dateRange = document.getElementById('date-range').value;
        const params = new URLSearchParams({
            dateRange: dateRange,
            ...currentFilters
        });

        const response = await fetch(`/reports/api/certifications?${params}`);
        const data = await response.json();

        if (data.success) {
            certificationsData = data.data;
            updateOverviewCards();
            initializeCharts();
            loadTopEarners();
            loadPopularCertifications();
            loadCertificatesTable();
            loadFilterOptions();
        } else {
            showError('Failed to load certifications data');
        }
    } catch (error) {
        console.error('Error loading certifications:', error);
        showError('Error loading certifications data');
    } finally {
        showLoading(false);
    }
}

function updateOverviewCards() {
    const overview = certificationsData.overview || {};

    document.getElementById('total-certificates').textContent = overview.totalCertificates || 0;
    document.getElementById('validated-certificates').textContent = overview.validatedCertificates || 0;
    document.getElementById('pending-certificates').textContent = overview.pendingCertificates || 0;
    document.getElementById('avg-completion-time').textContent = (overview.avgCompletionTime || 0) + 'd';

    // Update trends
    document.getElementById('certificates-trend').textContent = '+' + (overview.certificatesTrend || 0) + ' this month';
    document.getElementById('validated-trend').textContent = (overview.validationRate || 0) + '% validation rate';
    document.getElementById('pending-trend').textContent = overview.pendingCertificates > 10 ? 'Requires attention' : 'Under control';
    document.getElementById('completion-trend').textContent = (overview.completionTimeTrend >= 0 ? '+' : '') + (overview.completionTimeTrend || 0) + ' days vs last period';
}

function initializeCharts() {
    // Destroy existing charts
    Object.values(charts).forEach(chart => chart.destroy());
    charts = {};

    // Certification Trends Chart
    const trendsCtx = document.getElementById('trendsChart').getContext('2d');
    charts.trends = new Chart(trendsCtx, {
        type: 'line',
        data: {
            labels: certificationsData.trends?.labels || [],
            datasets: [{
                label: 'Certificates Issued',
                data: certificationsData.trends?.issued || [],
                borderColor: '#3B82F6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                tension: 0.4,
                fill: true
            }, {
                label: 'Certificates Validated',
                data: certificationsData.trends?.validated || [],
                borderColor: '#10B981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });

    // Certificate Types Chart
    const typeCtx = document.getElementById('typeChart').getContext('2d');
    charts.type = new Chart(typeCtx, {
        type: 'doughnut',
        data: {
            labels: (certificationsData.types || []).map(t => t.name),
            datasets: [{
                data: (certificationsData.types || []).map(t => t.count),
                backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { position: 'bottom' }
            }
        }
    });

    // Department Performance Chart
    const deptCtx = document.getElementById('departmentChart').getContext('2d');
    charts.department = new Chart(deptCtx, {
        type: 'bar',
        data: {
            labels: (certificationsData.departments || []).map(d => d.name),
            datasets: [{
                label: 'Certificates Earned',
                data: (certificationsData.departments || []).map(d => d.count),
                backgroundColor: '#6366F1'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });

    // Validation Status Chart
    const validationCtx = document.getElementById('validationChart').getContext('2d');
    charts.validation = new Chart(validationCtx, {
        type: 'pie',
        data: {
            labels: ['Validated', 'Pending', 'Rejected', 'Expired'],
            datasets: [{
                data: [
                    certificationsData.validation?.validated || 0,
                    certificationsData.validation?.pending || 0,
                    certificationsData.validation?.rejected || 0,
                    certificationsData.validation?.expired || 0
                ],
                backgroundColor: ['#10B981', '#F59E0B', '#EF4444', '#6B7280']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { position: 'bottom' }
            }
        }
    });
}

function loadTopEarners() {
    const tbody = document.getElementById('top-earners-table');
    tbody.innerHTML = '';

    const topEarners = certificationsData.topEarners || [];
    topEarners.forEach((earner, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                ${index + 1}
                ${index === 0 ? '<i class="fas fa-crown text-yellow-500 ml-2"></i>' : ''}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <img class="h-8 w-8 rounded-full" src="${earner.avatar || '/images/default-avatar.png'}" alt="">
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">${earner.name}</p>
                        <p class="text-sm text-gray-500">${earner.department}</p>
                    </div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">${earner.certificateCount}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${earner.latestCertificate ? new Date(earner.latestCertificate).toLocaleDateString() : 'N/A'}
            </td>
        `;
        tbody.appendChild(row);
    });
}

function loadPopularCertifications() {
    const tbody = document.getElementById('popular-certificates-table');
    tbody.innerHTML = '';

    const popular = certificationsData.popularCertifications || [];
    popular.forEach(cert => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
                <div>
                    <p class="text-sm font-medium text-gray-900">${cert.title}</p>
                    <p class="text-sm text-gray-500">${cert.course}</p>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">${cert.earned}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${cert.inProgress}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <span class="text-${cert.successRate >= 75 ? 'green' : cert.successRate >= 50 ? 'yellow' : 'red'}-600">
                    ${cert.successRate}%
                </span>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function loadCertificatesTable() {
    const tbody = document.getElementById('certificates-table');
    tbody.innerHTML = '';

    const certificates = certificationsData.certificates || [];
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedCertificates = certificates.slice(start, end);

    paginatedCertificates.forEach(cert => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
                <input type="checkbox" class="certificate-checkbox rounded border-gray-300" value="${cert.certificate_id}">
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <img class="h-8 w-8 rounded-full" src="${cert.user.avatar || '/images/default-avatar.png'}" alt="">
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">${cert.user.name}</p>
                        <p class="text-sm text-gray-500">${cert.user.department}</p>
                    </div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div>
                    <p class="text-sm font-medium text-gray-900">${cert.title}</p>
                    <p class="text-sm text-gray-500">${cert.course}</p>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getCertificateTypeBadge(cert.type)}">
                    ${cert.type}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${new Date(cert.issued_date).toLocaleDateString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${cert.expiry_date ? new Date(cert.expiry_date).toLocaleDateString() : 'No expiry'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(cert.status)}">
                    ${cert.status}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                    <button onclick="previewCertificate('${cert.certificate_id}')" class="text-blue-600 hover:text-blue-900">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button onclick="downloadCertificatePDF('${cert.certificate_id}')" class="text-green-600 hover:text-green-900">
                        <i class="fas fa-download"></i>
                    </button>
                    ${cert.status === 'pending' ? `
                        <button onclick="validateCertificate('${cert.certificate_id}')" class="text-purple-600 hover:text-purple-900">
                            <i class="fas fa-shield-alt"></i>
                        </button>
                    ` : ''}
                    <button onclick="revokeCertificate('${cert.certificate_id}')" class="text-red-600 hover:text-red-900">
                        <i class="fas fa-ban"></i>
                    </button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });

    // Add event listeners to checkboxes
    document.querySelectorAll('.certificate-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', handleCheckboxChange);
    });

    updatePagination(certificates.length);
    updateSelectedCount();
}

function getCertificateTypeBadge(type) {
    const badges = {
        'course_completion': 'bg-blue-100 text-blue-800',
        'skill_mastery': 'bg-green-100 text-green-800',
        'professional': 'bg-purple-100 text-purple-800',
        'compliance': 'bg-orange-100 text-orange-800'
    };
    return badges[type] || 'bg-gray-100 text-gray-800';
}

function getStatusBadge(status) {
    const badges = {
        'issued': 'bg-blue-100 text-blue-800',
        'validated': 'bg-green-100 text-green-800',
        'pending': 'bg-yellow-100 text-yellow-800',
        'revoked': 'bg-red-100 text-red-800',
        'expired': 'bg-gray-100 text-gray-800'
    };
    return badges[status] || 'bg-gray-100 text-gray-800';
}

function loadFilterOptions() {
    // Load courses
    const courseSelect = document.getElementById('course-filter');
    const courses = [...new Set((certificationsData.certificates || []).map(c => c.course))];
    courseSelect.innerHTML = '<option value="">All Courses</option>';
    courses.forEach(course => {
        const option = document.createElement('option');
        option.value = course;
        option.textContent = course;
        courseSelect.appendChild(option);
    });
}

function applyFilters() {
    currentFilters = {
        course: document.getElementById('course-filter').value,
        status: document.getElementById('status-filter').value,
        department: document.getElementById('department-filter').value,
        type: document.getElementById('certificate-type').value,
        search: document.getElementById('search-certificates').value
    };

    // Remove empty filters
    Object.keys(currentFilters).forEach(key => {
        if (!currentFilters[key]) {
            delete currentFilters[key];
        }
    });

    currentPage = 1;
    selectedCertificates.clear();
    loadCertificationsData();
}

function clearAllFilters() {
    currentFilters = {};
    document.getElementById('course-filter').value = '';
    document.getElementById('status-filter').value = '';
    document.getElementById('department-filter').value = '';
    document.getElementById('certificate-type').value = '';
    document.getElementById('search-certificates').value = '';
    selectedCertificates.clear();
    loadCertificationsData();
}

function sortCertificates(field) {
    if (sortField === field) {
        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
        sortField = field;
        sortDirection = 'desc';
    }

    certificationsData.certificates.sort((a, b) => {
        let aValue = a[field];
        let bValue = b[field];

        if (field === 'user') {
            aValue = a.user.name.toLowerCase();
            bValue = b.user.name.toLowerCase();
        } else if (field === 'issued_date' || field === 'expiry_date') {
            aValue = new Date(aValue).getTime();
            bValue = new Date(bValue).getTime();
        } else if (typeof aValue === 'string') {
            aValue = aValue.toLowerCase();
            bValue = bValue.toLowerCase();
        }

        if (sortDirection === 'asc') {
            return aValue > bValue ? 1 : -1;
        } else {
            return aValue < bValue ? 1 : -1;
        }
    });

    loadCertificatesTable();
}

function updatePagination(totalItems) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const showingFrom = totalItems === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
    const showingTo = Math.min(currentPage * itemsPerPage, totalItems);

    document.getElementById('showing-from').textContent = showingFrom;
    document.getElementById('showing-to').textContent = showingTo;
    document.getElementById('total-certificates-count').textContent = totalItems;
    document.getElementById('current-page').textContent = currentPage;
    document.getElementById('total-pages').textContent = totalPages;

    document.getElementById('prev-btn').disabled = currentPage <= 1;
    document.getElementById('next-btn').disabled = currentPage >= totalPages;
}

function handleSelectAll() {
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    const certificateCheckboxes = document.querySelectorAll('.certificate-checkbox');

    certificateCheckboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
        if (selectAllCheckbox.checked) {
            selectedCertificates.add(checkbox.value);
        } else {
            selectedCertificates.delete(checkbox.value);
        }
    });

    updateSelectedCount();
}

function handleCheckboxChange(event) {
    if (event.target.checked) {
        selectedCertificates.add(event.target.value);
    } else {
        selectedCertificates.delete(event.target.value);
    }

    updateSelectedCount();

    // Update select all checkbox
    const certificateCheckboxes = document.querySelectorAll('.certificate-checkbox');
    const selectedCheckboxes = document.querySelectorAll('.certificate-checkbox:checked');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');

    selectAllCheckbox.checked = selectedCheckboxes.length === certificateCheckboxes.length;
    selectAllCheckbox.indeterminate = selectedCheckboxes.length > 0 && selectedCheckboxes.length < certificateCheckboxes.length;
}

function updateSelectedCount() {
    document.getElementById('selected-count').textContent = selectedCertificates.size;
}

function selectAll() {
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    selectAllCheckbox.checked = true;
    handleSelectAll();
}

function deselectAll() {
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    selectAllCheckbox.checked = false;
    handleSelectAll();
}

function previousPage() {
    if (currentPage > 1) {
        currentPage--;
        loadCertificatesTable();
    }
}

function nextPage() {
    const totalPages = Math.ceil((certificationsData.certificates || []).length / itemsPerPage);
    if (currentPage < totalPages) {
        currentPage++;
        loadCertificatesTable();
    }
}

async function previewCertificate(certificateId) {
    currentCertificateId = certificateId;

    try {
        const response = await fetch(`/certificates/api/${certificateId}/preview`);
        const data = await response.json();

        if (data.success) {
            const content = document.getElementById('certificate-preview-content');
            content.innerHTML = `
                <div class="bg-gradient-to-br from-blue-50 to-indigo-50 p-8 rounded-lg border-2 border-blue-200">
                    <div class="text-center">
                        <div class="mx-auto w-20 h-20 bg-blue-600 rounded-full flex items-center justify-center mb-6">
                            <i class="fas fa-certificate text-white text-3xl"></i>
                        </div>
                        <h1 class="text-3xl font-bold text-gray-900 mb-2">Certificate of Achievement</h1>
                        <div class="w-24 h-1 bg-blue-600 mx-auto mb-6"></div>

                        <p class="text-lg text-gray-700 mb-4">This is to certify that</p>
                        <h2 class="text-4xl font-bold text-blue-800 mb-6">${data.certificate.user.name}</h2>

                        <p class="text-lg text-gray-700 mb-2">has successfully completed</p>
                        <h3 class="text-2xl font-bold text-gray-900 mb-6">${data.certificate.course}</h3>

                        <div class="flex justify-between items-end mt-12">
                            <div class="text-left">
                                <p class="text-sm text-gray-600">Date of Completion</p>
                                <p class="text-lg font-semibold">${new Date(data.certificate.issued_date).toLocaleDateString()}</p>
                            </div>
                            <div class="text-center">
                                <div class="w-32 h-16 bg-blue-100 rounded flex items-center justify-center mb-2">
                                    <span class="text-blue-800 font-bold">VERIFIED</span>
                                </div>
                                <p class="text-xs text-gray-500">Certificate ID: ${data.certificate.certificate_id}</p>
                            </div>
                            <div class="text-right">
                                <p class="text-sm text-gray-600">Instructor</p>
                                <p class="text-lg font-semibold">${data.certificate.instructor || 'LearnHub'}</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('preview-modal').classList.remove('hidden');
        } else {
            showError('Failed to load certificate preview');
        }
    } catch (error) {
        console.error('Error loading certificate preview:', error);
        showError('Error loading certificate preview');
    }
}

function closeCertificatePreview() {
    document.getElementById('preview-modal').classList.add('hidden');
    currentCertificateId = null;
}

async function downloadCertificate() {
    if (!currentCertificateId) return;

    try {
        const response = await fetch(`/certificates/api/${currentCertificateId}/download`);

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `certificate-${currentCertificateId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            showSuccess('Certificate downloaded successfully');
        } else {
            showError('Failed to download certificate');
        }
    } catch (error) {
        console.error('Error downloading certificate:', error);
        showError('Error downloading certificate');
    }
}

async function downloadCertificatePDF(certificateId) {
    try {
        const response = await fetch(`/certificates/api/${certificateId}/download`);

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `certificate-${certificateId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            showSuccess('Certificate downloaded successfully');
        } else {
            showError('Failed to download certificate');
        }
    } catch (error) {
        console.error('Error downloading certificate:', error);
        showError('Error downloading certificate');
    }
}

async function validateCertificate(certificateId) {
    try {
        const response = await fetch(`/certificates/api/${certificateId}`);
        const data = await response.json();

        if (data.success) {
            displayValidationForm(data.certificate);
        } else {
            showError('Failed to load certificate details');
        }
    } catch (error) {
        console.error('Error loading certificate:', error);
        showError('Error loading certificate details');
    }
}

function displayValidationForm(certificate) {
    const content = document.getElementById('validation-content');

    content.innerHTML = `
        <form id="validation-form">
            <input type="hidden" id="certificate-id" value="${certificate.certificate_id}">

            <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                <h4 class="font-semibold mb-2">Certificate Information</h4>
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <span class="font-medium">User:</span> ${certificate.user.name}
                    </div>
                    <div>
                        <span class="font-medium">Course:</span> ${certificate.course}
                    </div>
                    <div>
                        <span class="font-medium">Issued:</span> ${new Date(certificate.issued_date).toLocaleDateString()}
                    </div>
                    <div>
                        <span class="font-medium">Score:</span> ${certificate.score}%
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label for="validation-status" class="block text-sm font-medium text-gray-700 mb-2">Validation Status</label>
                <select id="validation-status" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="validated">Approve & Validate</option>
                    <option value="rejected">Reject</option>
                    <option value="pending">Keep Pending</option>
                </select>
            </div>

            <div class="mb-4">
                <label for="validation-notes" class="block text-sm font-medium text-gray-700 mb-2">Validation Notes</label>
                <textarea id="validation-notes" rows="3" class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500"
                          placeholder="Add any notes about the validation decision..."></textarea>
            </div>

            <div class="mb-6">
                <label class="flex items-center">
                    <input type="checkbox" id="notify-user" checked class="mr-2">
                    <span class="text-sm">Notify user via email about validation status</span>
                </label>
            </div>

            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeValidationModal()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                    Cancel
                </button>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                    Submit Validation
                </button>
            </div>
        </form>
    `;

    document.getElementById('validation-form').addEventListener('submit', submitValidation);
    document.getElementById('validation-modal').classList.remove('hidden');
}

async function submitValidation(event) {
    event.preventDefault();

    const certificateId = document.getElementById('certificate-id').value;
    const status = document.getElementById('validation-status').value;
    const notes = document.getElementById('validation-notes').value;
    const notifyUser = document.getElementById('notify-user').checked;

    try {
        const response = await fetch(`/certificates/api/${certificateId}/validate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status, notes, notifyUser })
        });

        const data = await response.json();

        if (data.success) {
            showSuccess('Certificate validation updated successfully');
            closeValidationModal();
            loadCertificationsData();
        } else {
            showError(data.message || 'Failed to update validation');
        }
    } catch (error) {
        console.error('Error updating validation:', error);
        showError('Error updating validation');
    }
}

function closeValidationModal() {
    document.getElementById('validation-modal').classList.add('hidden');
}

async function revokeCertificate(certificateId) {
    if (!confirm('Are you sure you want to revoke this certificate? This action cannot be undone.')) {
        return;
    }

    try {
        const response = await fetch(`/certificates/api/${certificateId}/revoke`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showSuccess('Certificate revoked successfully');
            loadCertificationsData();
        } else {
            showError(data.message || 'Failed to revoke certificate');
        }
    } catch (error) {
        console.error('Error revoking certificate:', error);
        showError('Error revoking certificate');
    }
}

async function bulkValidateCertificates() {
    if (selectedCertificates.size === 0) {
        showError('Please select certificates to validate');
        return;
    }

    if (!confirm(`Are you sure you want to validate ${selectedCertificates.size} selected certificates?`)) {
        return;
    }

    showLoading(true);

    try {
        const response = await fetch('/certificates/api/bulk-validate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                certificateIds: Array.from(selectedCertificates),
                status: 'validated',
                notes: 'Bulk validation'
            })
        });

        const data = await response.json();

        if (data.success) {
            showSuccess(`${data.validatedCount} certificates validated successfully`);
            selectedCertificates.clear();
            loadCertificationsData();
        } else {
            showError(data.message || 'Failed to bulk validate certificates');
        }
    } catch (error) {
        console.error('Error bulk validating certificates:', error);
        showError('Error bulk validating certificates');
    } finally {
        showLoading(false);
    }
}

async function exportCertifications() {
    showLoading(true);

    try {
        const dateRange = document.getElementById('date-range').value;
        const params = new URLSearchParams({
            dateRange: dateRange,
            ...currentFilters
        });

        const response = await fetch(`/reports/api/certifications/export?${params}`);

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `certifications-report-${new Date().toISOString().split('T')[0]}.xlsx`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            showSuccess('Certifications report exported successfully');
        } else {
            showError('Failed to export report');
        }
    } catch (error) {
        console.error('Error exporting report:', error);
        showError('Error exporting report');
    } finally {
        showLoading(false);
    }
}

function generateCertificateReport() {
    window.open('/reports/certificates/generate', '_blank');
}

function scheduleReminders() {
    alert('Reminder scheduling feature coming soon!');
}

function showLoading(show) {
    const overlay = document.getElementById('loading-overlay');
    overlay.classList.toggle('hidden', !show);
}

function showSuccess(message) {
    alert(message); // Replace with toast notification
}

function showError(message) {
    alert('Error: ' + message); // Replace with toast notification
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
</script>

<%- include('../partials/footer') %>