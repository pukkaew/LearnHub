

<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
        <div class="flex items-start justify-between">
            <div class="flex-1">
                <h1 id="test-title" class="text-3xl font-bold text-gray-900 mb-2">กำลังโหลด...</h1>
                <p id="test-code" class="text-sm text-gray-500 mb-4"></p>
                <p id="test-description" class="text-gray-600 mb-4"></p>

                <!-- Test Info -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                        <span class="text-gray-500">จำนวนข้อ:</span>
                        <span id="question-count" class="font-medium">-</span>
                    </div>
                    <div>
                        <span class="text-gray-500">เวลา:</span>
                        <span id="time-limit" class="font-medium">-</span>
                    </div>
                    <div>
                        <span class="text-gray-500">คะแนนผ่าน:</span>
                        <span id="passing-score" class="font-medium">-</span>
                    </div>
                    <div>
                        <span class="text-gray-500">ระดับ:</span>
                        <span id="difficulty" class="font-medium">-</span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-col space-y-3 ml-6">
                <button id="start-test-btn" onclick="startTest()"
                        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white ruxchai-gradient hover:opacity-90">
                    <i class="fas fa-play mr-2"></i>เริ่มทำข้อสอบ
                </button>

                <div class="flex space-x-2">
                    <% if (['Admin', 'Instructor'].includes(user.role)) { %>
                    <a id="edit-test-link" href="#"
                       class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                        <i class="fas fa-edit mr-2"></i>แก้ไข
                    </a>
                    <% } %>

                    <button onclick="shareTest()"
                            class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                        <i class="fas fa-share mr-2"></i>แชร์
                    </button>
                </div>
            </div>
        </div>

        <!-- Status Badge -->
        <div class="mt-4">
            <span id="status-badge" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                <span id="status-text">-</span>
            </span>
        </div>
    </div>

    <!-- Test Instructions -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
        <h3 class="text-lg font-medium text-gray-900 mb-4">
            <i class="fas fa-info-circle mr-2 text-ruxchai-primary"></i>คำแนะนำสำหรับการทำข้อสอบ
        </h3>
        <div id="test-instructions" class="prose max-w-none text-gray-600">
            <!-- Instructions will be loaded here -->
        </div>

        <!-- Important Rules -->
        <div class="mt-6 bg-yellow-50 border border-yellow-200 rounded-md p-4">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-triangle text-yellow-400"></i>
                </div>
                <div class="ml-3">
                    <h4 class="text-sm font-medium text-yellow-800">ข้อควรระวัง</h4>
                    <div class="mt-2 text-sm text-yellow-700">
                        <ul class="list-disc list-inside space-y-1">
                            <li>อ่านคำถามให้ละเอียดก่อนตอบ</li>
                            <li>ตรวจสอบคำตอบก่อนส่ง เมื่อส่งแล้วจะไม่สามารถแก้ไขได้</li>
                            <li id="attempt-limit">จำนวนครั้งที่ทำได้: <span class="font-medium">-</span></li>
                            <li id="camera-required" class="hidden text-red-700">จำเป็นต้องเปิดกล้องตลอดการทำข้อสอบ</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Previous Attempts -->
    <div id="attempts-section" class="bg-white rounded-lg shadow mb-8">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">
                <i class="fas fa-history mr-2 text-ruxchai-primary"></i>ประวัติการสอบ
            </h3>
        </div>
        <div class="p-6">
            <div id="attempts-list">
                <!-- Attempts will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Test Statistics (for instructors) -->
    <% if (['Admin', 'Instructor'].includes(user.role)) { %>
    <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">
                <i class="fas fa-chart-bar mr-2 text-ruxchai-primary"></i>สถิติข้อสอบ
            </h3>
        </div>
        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600" id="total-attempts">-</div>
                    <div class="text-sm text-gray-500">ผู้เข้าสอบทั้งหมด</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-green-600" id="pass-rate">-</div>
                    <div class="text-sm text-gray-500">อัตราผ่าน</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-yellow-600" id="avg-score">-</div>
                    <div class="text-sm text-gray-500">คะแนนเฉลี่ย</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-purple-600" id="avg-time">-</div>
                    <div class="text-sm text-gray-500">เวลาเฉลี่ย</div>
                </div>
            </div>

            <div class="mt-6 flex justify-center space-x-3">
                <a id="results-link" href="#"
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                    <i class="fas fa-list mr-2"></i>ดูผลสอบทั้งหมด
                </a>
                <a id="analytics-link" href="#"
                   class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ruxchai-gradient hover:opacity-90">
                    <i class="fas fa-chart-line mr-2"></i>วิเคราะห์ข้อสอบ
                </a>
            </div>
        </div>
    </div>
    <% } %>
</div>

<!-- Access Code Modal -->
<div id="access-code-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100">
                <i class="fas fa-key text-yellow-600"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mt-4">ป้อนรหัสเข้าสอบ</h3>
            <div class="mt-4">
                <input type="text" id="access-code-input"
                       class="w-full rounded-md border-gray-300 shadow-sm focus:border-ruxchai-primary focus:ring-ruxchai-primary"
                       placeholder="ป้อนรหัสเข้าสอบ">
            </div>
            <div class="mt-6 flex space-x-3 justify-center">
                <button onclick="closeAccessCodeModal()"
                        class="px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                    ยกเลิก
                </button>
                <button onclick="verifyAccessCode()"
                        class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ruxchai-gradient hover:opacity-90">
                    ยืนยัน
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let testId, testData = {}, userAttempts = [];

document.addEventListener('DOMContentLoaded', function() {
    testId = window.location.pathname.split('/')[2];
    loadTestData();
    loadUserAttempts();
    <% if (['Admin', 'Instructor'].includes(user.role)) { %>
    loadTestStatistics();
    <% } %>
});

async function loadTestData() {
    try {
        const response = await fetch(`/tests/api/${testId}`);
        const result = await response.json();

        if (result.success) {
            testData = result.data;
            displayTestInfo();
        } else {
            showError('ไม่พบข้อมูลข้อสอบ');
        }
    } catch (error) {
        showError('เกิดข้อผิดพลาดในการโหลดข้อมูล');
    }
}

function displayTestInfo() {
    document.getElementById('test-title').textContent = testData.test_name;
    document.getElementById('test-code').textContent = `รหัสข้อสอบ: ${testData.test_code}`;
    document.getElementById('test-description').textContent = testData.description || '';
    document.getElementById('question-count').textContent = testData.question_count || 0;
    document.getElementById('time-limit').textContent = testData.time_limit ? `${testData.time_limit} นาที` : 'ไม่จำกัด';
    document.getElementById('passing-score').textContent = `${testData.passing_score || 70}%`;
    document.getElementById('difficulty').textContent = getDifficultyText(testData.difficulty_level);
    document.getElementById('attempt-limit').innerHTML = `จำนวนครั้งที่ทำได้: <span class="font-medium">${testData.max_attempts || 1}</span>`;

    // Instructions
    document.getElementById('test-instructions').innerHTML = testData.instructions || 'ไม่มีคำแนะนำเพิ่มเติม';

    // Status
    updateStatusBadge(testData.status);

    // Camera requirement
    if (testData.require_camera) {
        document.getElementById('camera-required').classList.remove('hidden');
    }

    // Links for instructors
    <% if (['Admin', 'Instructor'].includes(user.role)) { %>
    document.getElementById('edit-test-link').href = `/tests/${testId}/edit`;
    document.getElementById('results-link').href = `/tests/${testId}/results`;
    document.getElementById('analytics-link').href = `/tests/${testId}/analytics`;
    <% } %>

    // Check if test can be started
    updateStartButton();
}

function getDifficultyText(level) {
    const levels = {
        'Easy': 'ง่าย',
        'Medium': 'ปานกลาง',
        'Hard': 'ยาก'
    };
    return levels[level] || level;
}

function updateStatusBadge(status) {
    const badge = document.getElementById('status-badge');
    const text = document.getElementById('status-text');

    badge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ';

    switch (status) {
        case 'Published':
            badge.className += 'bg-green-100 text-green-800';
            text.textContent = 'เปิดใช้งาน';
            break;
        case 'Draft':
            badge.className += 'bg-yellow-100 text-yellow-800';
            text.textContent = 'ร่าง';
            break;
        case 'Archived':
            badge.className += 'bg-gray-100 text-gray-800';
            text.textContent = 'เก็บถาวร';
            break;
        default:
            badge.className += 'bg-gray-100 text-gray-800';
            text.textContent = status;
    }
}

async function loadUserAttempts() {
    try {
        const response = await fetch(`/tests/api/${testId}/my-attempts`);
        const result = await response.json();

        if (result.success) {
            userAttempts = result.data;
            displayAttempts();
        }
    } catch (error) {
        console.error('Error loading user attempts:', error);
    }
}

function displayAttempts() {
    const container = document.getElementById('attempts-list');

    if (userAttempts.length === 0) {
        container.innerHTML = `
            <div class="text-center py-4 text-gray-500">
                <i class="fas fa-clipboard-list text-gray-300 text-2xl mb-2"></i>
                <p>ยังไม่เคยทำข้อสอบนี้</p>
            </div>
        `;
        return;
    }

    container.innerHTML = userAttempts.map((attempt, index) => `
        <div class="flex items-center justify-between p-3 border rounded-lg ${attempt.status === 'Completed' ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'} mb-3">
            <div>
                <div class="flex items-center space-x-3">
                    <span class="text-sm font-medium">ครั้งที่ ${attempt.attempt_number}</span>
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        attempt.passed ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }">
                        ${attempt.passed ? 'ผ่าน' : 'ไม่ผ่าน'}
                    </span>
                </div>
                <div class="text-sm text-gray-500 mt-1">
                    ${formatDate(attempt.start_time)} • คะแนน: ${attempt.score}/${attempt.max_score} (${attempt.percentage}%)
                </div>
            </div>
            <div class="flex space-x-2">
                ${attempt.status === 'Completed' ? `
                    <button onclick="viewResults('${attempt.attempt_id}')"
                            class="text-blue-600 hover:text-blue-800 text-sm">
                        <i class="fas fa-eye mr-1"></i>ดูผล
                    </button>
                ` : `
                    <button onclick="continueAttempt('${attempt.attempt_id}')"
                            class="text-orange-600 hover:text-orange-800 text-sm">
                        <i class="fas fa-play mr-1"></i>ทำต่อ
                    </button>
                `}
            </div>
        </div>
    `).join('');
}

<% if (['Admin', 'Instructor'].includes(user.role)) { %>
async function loadTestStatistics() {
    try {
        const response = await fetch(`/tests/api/${testId}/stats`);
        const result = await response.json();

        if (result.success) {
            const stats = result.data;
            document.getElementById('total-attempts').textContent = stats.total_attempts || 0;
            document.getElementById('pass-rate').textContent = `${stats.pass_rate || 0}%`;
            document.getElementById('avg-score').textContent = `${stats.avg_score || 0}%`;
            document.getElementById('avg-time').textContent = formatDuration(stats.avg_time || 0);
        }
    } catch (error) {
        console.error('Error loading test statistics:', error);
    }
}
<% } %>

function updateStartButton() {
    const btn = document.getElementById('start-test-btn');

    // Check if test is available
    if (testData.status !== 'Published') {
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-lock mr-2"></i>ข้อสอบยังไม่เปิดใช้งาน';
        btn.className = btn.className.replace('ruxchai-gradient', 'bg-gray-400');
        return;
    }

    // Check date range
    const now = new Date();
    if (testData.start_date && new Date(testData.start_date) > now) {
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-calendar mr-2"></i>ยังไม่ถึงเวลาเปิดสอบ';
        btn.className = btn.className.replace('ruxchai-gradient', 'bg-gray-400');
        return;
    }

    if (testData.end_date && new Date(testData.end_date) < now) {
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-calendar-times mr-2"></i>หมดเวลาการสอบแล้ว';
        btn.className = btn.className.replace('ruxchai-gradient', 'bg-gray-400');
        return;
    }

    // Check attempt limit
    const completedAttempts = userAttempts.filter(a => a.status === 'Completed').length;
    if (completedAttempts >= testData.max_attempts) {
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-ban mr-2"></i>ทำข้อสอบครบจำนวนครั้งแล้ว';
        btn.className = btn.className.replace('ruxchai-gradient', 'bg-gray-400');
        return;
    }

    // Check if already in progress
    const inProgressAttempt = userAttempts.find(a => a.status === 'In Progress');
    if (inProgressAttempt) {
        btn.innerHTML = '<i class="fas fa-play mr-2"></i>ทำต่อข้อสอบ';
        btn.onclick = () => continueAttempt(inProgressAttempt.attempt_id);
    }
}

async function startTest() {
    // Check if access code is required
    if (testData.access_code) {
        document.getElementById('access-code-modal').classList.remove('hidden');
        return;
    }

    await createNewAttempt();
}

async function verifyAccessCode() {
    const accessCode = document.getElementById('access-code-input').value.trim();

    if (!accessCode) {
        showError('กรุณาป้อนรหัสเข้าสอบ');
        return;
    }

    if (accessCode !== testData.access_code) {
        showError('รหัสเข้าสอบไม่ถูกต้อง');
        return;
    }

    closeAccessCodeModal();
    await createNewAttempt();
}

function closeAccessCodeModal() {
    document.getElementById('access-code-modal').classList.add('hidden');
    document.getElementById('access-code-input').value = '';
}

async function createNewAttempt() {
    try {
        const response = await fetch(`/tests/api/${testId}/start`, {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
            window.location.href = `/tests/${testId}/take?attempt=${result.data.attempt_id}`;
        } else {
            showError(result.message || 'ไม่สามารถเริ่มทำข้อสอบได้');
        }
    } catch (error) {
        showError('เกิดข้อผิดพลาดในการเริ่มข้อสอบ');
    }
}

function continueAttempt(attemptId) {
    window.location.href = `/tests/${testId}/take?attempt=${attemptId}`;
}

function viewResults(attemptId) {
    window.location.href = `/tests/${testId}/results?attempt=${attemptId}`;
}

function shareTest() {
    const url = window.location.href;

    if (navigator.share) {
        navigator.share({
            title: testData.test_name,
            text: testData.description,
            url: url
        });
    } else {
        navigator.clipboard.writeText(url).then(() => {
            showSuccess('คัดลอกลิงก์แล้ว');
        });
    }
}

// Helper functions
function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function formatDuration(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
}
</script>