<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900"><%= t('editUser') %></h1>
            <p class="text-gray-600 mt-2"><%= t('editUserData') %></p>
        </div>
        <div class="flex space-x-3">
            <button onclick="resetPassword()" class="bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700">
                <i class="fas fa-key mr-2"></i><%= t('password') %>
            </button>
            <button onclick="previewUser()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700">
                <i class="fas fa-eye mr-2"></i><%= t('preview') %>
            </button>
            <a href="/admin/users" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">
                <i class="fas fa-arrow-left mr-2"></i><%= t('backToUsers') %>
            </a>
        </div>
    </div>

    <!-- User Status Banner -->
    <div id="user-status-banner" class="mb-6 p-4 rounded-lg border">
        <!-- Will be populated based on user status -->
    </div>

    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Left Column: User Info & Activity -->
        <div class="lg:col-span-1 space-y-6">
            <!-- User Card -->
            <div class="bg-white rounded-lg shadow-sm p-6">
                <div class="text-center">
                    <div class="relative inline-block">
                        <img id="current-avatar" src="/images/default-avatar.png"
                             alt="User Avatar" class="h-24 w-24 rounded-full object-cover mx-auto border-4 border-gray-200">
                        <div class="absolute bottom-0 right-0">
                            <span id="status-indicator" class="block h-6 w-6 rounded-full border-2 border-white"></span>
                        </div>
                    </div>
                    <h3 id="user-display-name" class="mt-4 text-lg font-semibold text-gray-900"></h3>
                    <p id="user-role-badge" class="text-sm text-gray-600"></p>
                    <div id="user-badges" class="mt-2 flex justify-center flex-wrap gap-2">
                        <!-- Dynamic badges will be added here -->
                    </div>
                </div>

                <div class="mt-6 space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-600"><%= t('lastLogin') %>:</span>
                        <span id="last-login" class="text-sm font-medium"></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-600"><%= t('createAccount') %>:</span>
                        <span id="created-date" class="text-sm font-medium"></span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-600"><%= t('login') %>:</span>
                        <span id="login-count" class="text-sm font-medium"></span>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="bg-white rounded-lg shadow-sm p-6">
                <h4 class="text-lg font-semibold text-gray-900 mb-4"><%= t('recentArticles') %></h4>
                <div id="recent-activity" class="space-y-3">
                    <!-- Activity items will be populated here -->
                </div>
                <a href="#" class="text-sm text-blue-600 hover:text-blue-800 mt-4 inline-block"><%= t('viewAll') %></a>
            </div>

            <!-- User Statistics -->
            <div class="bg-white rounded-lg shadow-sm p-6">
                <h4 class="text-lg font-semibold text-gray-900 mb-4"><%= t('statistics') %></h4>
                <div class="grid grid-cols-2 gap-4">
                    <div class="text-center">
                        <div id="courses-completed" class="text-2xl font-bold text-green-600">0</div>
                        <div class="text-sm text-gray-600"><%= t('completedCourses') %></div>
                    </div>
                    <div class="text-center">
                        <div id="tests-taken" class="text-2xl font-bold text-blue-600">0</div>
                        <div class="text-sm text-gray-600"><%= t('tests') %></div>
                    </div>
                    <div class="text-center">
                        <div id="avg-score" class="text-2xl font-bold text-purple-600">0%</div>
                        <div class="text-sm text-gray-600"><%= t('averageScore') %></div>
                    </div>
                    <div class="text-center">
                        <div id="certificates-earned" class="text-2xl font-bold text-yellow-600">0</div>
                        <div class="text-sm text-gray-600"><%= t('badges') %></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column: Edit Form -->
        <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow-sm">
                <!-- Tab Navigation -->
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
                        <button onclick="showTab('basic')" class="tab-button active py-4 px-1 border-b-2 border-blue-500 text-blue-600 text-sm font-medium">
                            <%= t('basicInformation') %>
                        </button>
                        <button onclick="showTab('role')" class="tab-button py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 text-sm font-medium">
                            <%= t('rolePermissions') %>
                        </button>
                        <button onclick="showTab('profile')" class="tab-button py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 text-sm font-medium">
                            <%= t('profileDetails') %>
                        </button>
                        <button onclick="showTab('settings')" class="tab-button py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 text-sm font-medium">
                            <%= t('accountSettings') %>
                        </button>
                    </nav>
                </div>

                <form id="edit-user-form" enctype="multipart/form-data">
                    <input type="hidden" id="user_id" name="user_id" value="<%= user?.user_id || '' %>">

                    <!-- Basic Information Tab -->
                    <div id="tab-basic" class="tab-content active p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4"><%= t('basicInformation') %></h3>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Username -->
                            <div>
                                <label for="username" class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('username') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="username" name="username" required
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="<%= t('enterUniqueUsername') %>">
                                <div id="username-availability" class="mt-1 text-sm"></div>
                            </div>

                            <!-- Email -->
                            <div>
                                <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('emailAddress') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="email" id="email" name="email" required
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="user@example.com">
                                <div id="email-availability" class="mt-1 text-sm"></div>
                            </div>

                            <!-- First Name -->
                            <div>
                                <label for="first_name" class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('firstName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="first_name" name="first_name" required
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="<%= t('enterFirstName') %>">
                            </div>

                            <!-- Last Name -->
                            <div>
                                <label for="last_name" class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('lastName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" id="last_name" name="last_name" required
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="<%= t('enterLastName') %>">
                            </div>

                            <!-- Phone -->
                            <div>
                                <label for="phone" class="block text-sm font-medium text-gray-700 mb-2"><%= t('phoneNumber') %></label>
                                <input type="tel" id="phone" name="phone"
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="+66 XX-XXX-XXXX">
                            </div>

                            <!-- Date of Birth -->
                            <div>
                                <label for="date_of_birth" class="block text-sm font-medium text-gray-700 mb-2"><%= t('dateOfBirth') %></label>
                                <input type="date" id="date_of_birth" name="date_of_birth"
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            </div>
                        </div>

                        <!-- Bio -->
                        <div class="mt-6">
                            <label for="bio" class="block text-sm font-medium text-gray-700 mb-2"><%= t('bioDescription') %></label>
                            <textarea id="bio" name="bio" rows="4"
                                      class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                      placeholder="<%= t('briefDescriptionAboutUser') %>"></textarea>
                            <div class="mt-1 text-sm text-gray-500">
                                <span id="bio-count">0</span>/500 <%= t('characters') %>
                            </div>
                        </div>
                    </div>

                    <!-- Role & Permissions Tab -->
                    <div id="tab-role" class="tab-content p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4"><%= t('rolePermissions') %></h3>

                        <!-- Current Role Display -->
                        <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h4 class="font-medium text-gray-900"><%= t('role') %></h4>
                                    <p id="current-role-desc" class="text-sm text-gray-600"></p>
                                </div>
                                <span id="current-role-badge" class="px-3 py-1 rounded-full text-sm font-medium"></span>
                            </div>
                        </div>

                        <!-- Role Selection -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <%= t('userRole') %> <span class="text-red-500">*</span>
                            </label>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div class="role-card" data-role="student">
                                    <input type="radio" name="role" value="student" id="role-student" class="hidden">
                                    <label for="role-student" class="block cursor-pointer">
                                        <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors">
                                            <div class="flex items-center mb-2">
                                                <i class="fas fa-user-graduate text-2xl text-blue-600 mr-3"></i>
                                                <h4 class="font-semibold"><%= t('student') %></h4>
                                            </div>
                                            <p class="text-sm text-gray-600"><%= t('canEnrollInCourses') %></p>
                                        </div>
                                    </label>
                                </div>

                                <div class="role-card" data-role="instructor">
                                    <input type="radio" name="role" value="instructor" id="role-instructor" class="hidden">
                                    <label for="role-instructor" class="block cursor-pointer">
                                        <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors">
                                            <div class="flex items-center mb-2">
                                                <i class="fas fa-chalkboard-teacher text-2xl text-green-600 mr-3"></i>
                                                <h4 class="font-semibold"><%= t('instructor') %></h4>
                                            </div>
                                            <p class="text-sm text-gray-600"><%= t('canCreateManageCourses') %></p>
                                        </div>
                                    </label>
                                </div>

                                <div class="role-card" data-role="admin">
                                    <input type="radio" name="role" value="admin" id="role-admin" class="hidden">
                                    <label for="role-admin" class="block cursor-pointer">
                                        <div class="border-2 border-gray-200 rounded-lg p-4 hover:border-blue-500 transition-colors">
                                            <div class="flex items-center mb-2">
                                                <i class="fas fa-user-shield text-2xl text-red-600 mr-3"></i>
                                                <h4 class="font-semibold"><%= t('admin') %></h4>
                                            </div>
                                            <p class="text-sm text-gray-600"><%= t('fullSystemAccess') %></p>
                                        </div>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Department -->
                        <div class="mb-6">
                            <label for="department" class="block text-sm font-medium text-gray-700 mb-2"><%= t('department') %></label>
                            <select id="department" name="department"
                                    class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                                <option value=""><%= t('selectDepartment') %></option>
                                <option value="IT"><%= t('informationTechnology') %></option>
                                <option value="HR"><%= t('humanResources') %></option>
                                <option value="Finance"><%= t('finance') %></option>
                                <option value="Marketing"><%= t('marketing') %></option>
                                <option value="Operations"><%= t('operations') %></option>
                                <option value="Sales"><%= t('sales') %></option>
                                <option value="Other"><%= t('other') %></option>
                            </select>
                        </div>

                        <!-- Manager -->
                        <div class="mb-6">
                            <label for="manager_id" class="block text-sm font-medium text-gray-700 mb-2"><%= t('manager') %></label>
                            <select id="manager_id" name="manager_id"
                                    class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                                <option value=""><%= t('selectManager') %></option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>

                        <!-- Role Change Warning -->
                        <div id="role-change-warning" class="hidden p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                            <div class="flex">
                                <i class="fas fa-exclamation-triangle text-yellow-600 mt-1"></i>
                                <div class="ml-3">
                                    <h4 class="text-sm font-medium text-yellow-800"><%= t('role') %></h4>
                                    <p class="text-sm text-yellow-700 mt-1" id="role-warning-text">
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Profile Details Tab -->
                    <div id="tab-profile" class="tab-content p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4"><%= t('profileDetails') %></h3>

                        <!-- Profile Picture -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-2"><%= t('profilePicture') %></label>
                            <div class="flex items-center space-x-6">
                                <div class="shrink-0">
                                    <img id="profile-preview" class="h-20 w-20 object-cover rounded-full border-2 border-gray-300"
                                         src="/images/default-avatar.png" alt="Profile preview">
                                </div>
                                <div class="flex-1">
                                    <label for="profile_picture" class="cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50">
                                        <%= t('chooseFile') %>
                                    </label>
                                    <input id="profile_picture" name="profile_picture" type="file" class="hidden" accept="image/*">
                                    <p class="mt-1 text-xs text-gray-500"><%= t('pngJpgUpTo2MB') %></p>
                                    <button type="button" onclick="removeProfilePicture()" class="text-sm text-red-600 hover:text-red-800 mt-2" id="remove-picture-btn">
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Gender -->
                            <div>
                                <label for="gender" class="block text-sm font-medium text-gray-700 mb-2"><%= t('gender') %></label>
                                <select id="gender" name="gender"
                                        class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                                    <option value=""><%= t('selectGender') %></option>
                                    <option value="male"><%= t('male') %></option>
                                    <option value="female"><%= t('female') %></option>
                                    <option value="other"><%= t('other') %></option>
                                    <option value="prefer_not_to_say"><%= t('preferNotToSay') %></option>
                                </select>
                            </div>

                            <!-- Position/Title -->
                            <div>
                                <label for="position" class="block text-sm font-medium text-gray-700 mb-2"><%= t('positionTitle') %></label>
                                <input type="text" id="position" name="position"
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="<%= t('jobTitleOrPosition') %>">
                            </div>

                            <!-- Employee ID -->
                            <div>
                                <label for="employee_id" class="block text-sm font-medium text-gray-700 mb-2"><%= t('employeeID') %></label>
                                <input type="text" id="employee_id" name="employee_id"
                                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                       placeholder="<%= t('employeeIDIfApplicable') %>">
                            </div>

                            <!-- Timezone -->
                            <div>
                                <label for="timezone" class="block text-sm font-medium text-gray-700 mb-2"><%= t('settings') %></label>
                                <select id="timezone" name="timezone"
                                        class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                                    <option value="Asia/Bangkok">Bangkok (GMT+7)</option>
                                    <option value="Asia/Tokyo">Tokyo (GMT+9)</option>
                                    <option value="America/New_York">New York (GMT-5)</option>
                                    <option value="Europe/London">London (GMT+0)</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Account Settings Tab -->
                    <div id="tab-settings" class="tab-content p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4"><%= t('accountSettings') %></h3>

                        <!-- Account Status -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-3"><%= t('status') %></label>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" id="is_active" name="is_active" class="mr-2">
                                    <span class="text-sm"><%= t('accountIsActive') %></span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" id="email_verified" name="email_verified" class="mr-2">
                                    <span class="text-sm"><%= t('emailIsVerified') %></span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" id="is_locked" name="is_locked" class="mr-2">
                                    <span class="text-sm" id="account-locked-label"></span>
                                </label>
                            </div>
                        </div>

                        <!-- Password Settings -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-3"><%= t('password') %></label>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" id="require_password_change" name="require_password_change" class="mr-2">
                                    <span class="text-sm"><%= t('requirePasswordChangeOnFirstLogin') %></span>
                                </label>
                                <div class="flex items-center space-x-3">
                                    <span class="text-sm text-gray-600" id="last-password-label"></span>
                                    <span id="last-password-change" class="text-sm font-medium">Never</span>
                                    <button type="button" onclick="resetPassword()" class="text-sm text-blue-600 hover:text-blue-800" id="reset-now-btn">
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Login Attempts -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-3"><%= t('login') %></label>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span class="text-gray-600" id="failed-attempts-label"></span>
                                    <span id="failed-attempts" class="font-medium ml-2">0</span>
                                </div>
                                <div>
                                    <span class="text-gray-600" id="last-failed-label"></span>
                                    <span id="last-failed-attempt" class="font-medium ml-2">Never</span>
                                </div>
                            </div>
                            <button type="button" onclick="clearLoginAttempts()"
                                    class="mt-2 text-sm text-blue-600 hover:text-blue-800" id="clear-attempts-btn">
                            </button>
                        </div>

                        <!-- Notification Preferences -->
                        <div class="mb-6">
                            <label class="block text-sm font-medium text-gray-700 mb-3"><%= t('notifications') %></label>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" id="email_notifications" name="email_notifications" class="mr-2" checked>
                                    <span class="text-sm" id="email-notif-label"></span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" id="course_notifications" name="course_notifications" class="mr-2" checked>
                                    <span class="text-sm" id="course-notif-label"></span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" id="test_notifications" name="test_notifications" class="mr-2" checked>
                                    <span class="text-sm" id="test-notif-label"></span>
                                </label>
                            </div>
                        </div>

                        <!-- Danger Zone -->
                        <div class="border border-red-200 rounded-lg p-4 bg-red-50">
                            <h4 class="text-sm font-medium text-red-800 mb-2" id="danger-zone-title"></h4>
                            <div class="space-y-3">
                                <button type="button" onclick="suspendUser()"
                                        class="text-sm text-red-600 hover:text-red-800 block" id="suspend-user-btn">
                                </button>
                                <button type="button" onclick="deleteUser()"
                                        class="text-sm text-red-600 hover:text-red-800 block" id="delete-user-btn">
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="border-t border-gray-200 px-6 py-4">
                        <div class="flex justify-between items-center">
                            <div class="text-sm text-gray-500">
                                <span id="last-updated-label"></span> <span id="last-updated">Never</span>
                            </div>
                            <div class="flex space-x-3">
                                <button type="button" onclick="discardChanges()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" id="discard-btn">
                                </button>
                                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                                    <i class="fas fa-save mr-2"></i><%= t('saveChanges') %>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-semibold text-gray-900"><%= t('userPreview') %></h3>
                    <button onclick="closePreview()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div id="modal-preview-content">
                    <!-- Preview content will be populated here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Confirm Dialogs -->
<div id="confirm-dialog" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-md w-full">
            <div class="p-6">
                <div class="flex items-center mb-4">
                    <div id="confirm-icon" class="mr-4">
                        <i class="fas fa-exclamation-triangle text-yellow-500 text-2xl"></i>
                    </div>
                    <div>
                        <h3 id="confirm-title" class="text-lg font-semibold text-gray-900"></h3>
                    </div>
                </div>
                <p id="confirm-message" class="text-gray-600 mb-6"></p>
                <div class="flex justify-end space-x-3">
                    <button onclick="closeConfirmDialog()" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" id="cancel-btn">
                    </button>
                    <button id="confirm-action-btn" onclick="confirmAction()" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6">
        <div class="flex items-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span class="ml-3" id="loading-text"></span>
        </div>
    </div>
</div>

<style>
.tab-button.active {
    border-color: #3B82F6;
    color: #3B82F6;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.role-card input[type="radio"]:checked + label > div {
    border-color: #3B82F6;
    background-color: #EFF6FF;
}

.status-indicator.online {
    background-color: #10B981;
}

.status-indicator.offline {
    background-color: #6B7280;
}

.status-indicator.away {
    background-color: #F59E0B;
}
</style>

<script>
let originalData = {};
let currentUserId = null;
let confirmCallback = null;

// Translations object for JavaScript
const translations = {
    editUser: '<%= t("editUser") %>',
    editUserData: '<%= t("editUserData") %>',
    preview: '<%= t("preview") %>',
    backToUsers: '<%= t("backToUsers") %>',
    basicInformation: '<%= t("basicInformation") %>',
    rolePermissions: '<%= t("rolePermissions") %>',
    profileDetails: '<%= t("profileDetails") %>',
    accountSettings: '<%= t("accountSettings") %>',
    username: '<%= t("username") %>',
    emailAddress: '<%= t("emailAddress") %>',
    firstName: '<%= t("firstName") %>',
    lastName: '<%= t("lastName") %>',
    phoneNumber: '<%= t("phoneNumber") %>',
    dateOfBirth: '<%= t("dateOfBirth") %>',
    bioDescription: '<%= t("bioDescription") %>',
    characters: '<%= t("characters") %>',
    usernameAvailable: '<%= t("usernameAvailable") %>',
    usernameAlreadyTaken: '<%= t("usernameAlreadyTaken") %>',
    emailAvailable: '<%= t("emailAvailable") %>',
    emailAlreadyRegistered: '<%= t("emailAlreadyRegistered") %>',
    userRole: '<%= t("userRole") %>',
    student: '<%= t("student") %>',
    instructor: '<%= t("instructor") %>',
    admin: '<%= t("admin") %>',
    canEnrollInCourses: '<%= t("canEnrollInCourses") %>',
    canCreateManageCourses: '<%= t("canCreateManageCourses") %>',
    fullSystemAccess: '<%= t("fullSystemAccess") %>',
    department: '<%= t("department") %>',
    selectDepartment: '<%= t("selectDepartment") %>',
    selectManager: '<%= t("selectManager") %>',
    manager: '<%= t("manager") %>',
    profilePicture: '<%= t("profilePicture") %>',
    chooseFile: '<%= t("chooseFile") %>',
    gender: '<%= t("gender") %>',
    selectGender: '<%= t("selectGender") %>',
    male: '<%= t("male") %>',
    female: '<%= t("female") %>',
    other: '<%= t("other") %>',
    preferNotToSay: '<%= t("preferNotToSay") %>',
    positionTitle: '<%= t("positionTitle") %>',
    employeeID: '<%= t("employeeID") %>',
    accountIsActive: '<%= t("accountIsActive") %>',
    emailIsVerified: '<%= t("emailIsVerified") %>',
    requirePasswordChangeOnFirstLogin: '<%= t("requirePasswordChangeOnFirstLogin") %>',
    userPreview: '<%= t("userPreview") %>',
    saveChanges: '<%= t("saveChanges") %>',
    cancel: '<%= t("cancel") %>',
    confirm: '<%= t("confirm") %>',
    userEditedSuccess: '<%= t("userEditedSuccess") %>',
    failedToCreateUser: '<%= t("failedToCreateUser") %>',
    errorCreatingUser: '<%= t("errorCreatingUser") %>',
    errorUpdatingUser: '<%= t("errorUpdatingUser") %>',
    errorLoadingUserData: '<%= t("errorLoadingUserData") %>',
    loading: '<%= t("loading") %>',
    loadingShort: '<%= t("loadingShort") %>',
    never: '<%= t("never") || "Never" %>',
    verified: '<%= t("emailVerified") || "Verified" %>',
    locked: '<%= t("statusSuspended") || "Locked" %>',
    inactive: '<%= t("inactive") %>',
    active: '<%= t("active") %>',
    accountLocked: '<%= t("statusSuspended") || "Account is locked" %>',
    lastPasswordChange: '<%= t("password") %>:',
    resetNow: '<%= t("password") %>',
    failedAttempts: '<%= t("login") %>:',
    lastFailedAttempt: '<%= t("lastLogin") %>:',
    clearAttempts: '<%= t("cancel") %>',
    emailNotifications: '<%= t("notifications") %>',
    courseNotifications: '<%= t("courses") %>',
    testNotifications: '<%= t("tests") %>',
    dangerZone: '<%= t("management") %>',
    suspendUserAccount: '<%= t("suspendUser") %>',
    deleteUserPermanently: '<%= t("deleteUser") %>',
    lastUpdated: '<%= t("lastLogin") %>:',
    discardChanges: '<%= t("cancel") %>',
    removePicture: '<%= t("delete") %>',
    roleChangeWarning: '<%= t("role") %>',
    accountInactive: '<%= t("statusInactive") %>',
    accountActive: '<%= t("statusActive") %>',
    emailNotVerified: '<%= t("emailNotVerified") %>',
    noRecentActivity: '<%= t("noNotifications") %>',
    viewAllActivity: '<%= t("viewAll") %>',
    confirmDiscardChanges: '<%= t("confirmDeleteUser") || "Are you sure you want to discard all changes?" %>',
    changesDiscarded: '<%= t("cancel") %>',
    passwordReset: '<%= t("password") %>',
    passwordResetConfirm: '<%= t("password") %>',
    passwordResetSuccess: '<%= t("userEditedSuccess") %>',
    failedToResetPassword: '<%= t("error") %>',
    clearAttemptsTitle: '<%= t("cancel") %>',
    clearAttemptsConfirm: '<%= t("confirm") %>',
    clearAttemptsSuccess: '<%= t("userEditedSuccess") %>',
    failedToClearAttempts: '<%= t("error") %>',
    suspendUserTitle: '<%= t("suspendUser") %>',
    suspendUserConfirm: '<%= t("confirmSuspendUser") %>',
    suspendUserSuccess: '<%= t("userSuspendedSuccess") %>',
    failedToSuspendUser: '<%= t("error") %>',
    deleteUserTitle: '<%= t("deleteUser") %>',
    deleteUserConfirm: '<%= t("confirmDeleteUser") %>',
    deleteUserSuccess: '<%= t("userDeletedSuccess") %>',
    failedToDeleteUser: '<%= t("error") %>',
    error: '<%= t("error") %>',
    statistics: '<%= t("statistics") %>',
    employees: '<%= t("employees") %>',
    management: '<%= t("management") %>'
};

document.addEventListener('DOMContentLoaded', function() {
    // Initialize translated labels
    initializeTranslatedLabels();
    // Get user ID from URL or form
    currentUserId = document.getElementById('user_id').value || getUrlParameter('id');

    if (currentUserId) {
        loadUserData();
    }

    // Event listeners
    document.getElementById('username').addEventListener('blur', checkUsernameAvailability);
    document.getElementById('email').addEventListener('blur', checkEmailAvailability);
    document.getElementById('profile_picture').addEventListener('change', previewProfilePicture);
    document.getElementById('bio').addEventListener('input', updateBioCount);
    document.getElementById('edit-user-form').addEventListener('submit', submitForm);

    // Role change handler
    document.querySelectorAll('input[name="role"]').forEach(radio => {
        radio.addEventListener('change', handleRoleChange);
    });

    // Load managers
    loadManagers();
});

function initializeTranslatedLabels() {
    // Update all dynamic text labels with translations
    document.getElementById('remove-picture-btn').textContent = translations.removePicture;
    document.getElementById('account-locked-label').textContent = translations.accountLocked;
    document.getElementById('last-password-label').textContent = translations.lastPasswordChange;
    document.getElementById('reset-now-btn').textContent = translations.resetNow;
    document.getElementById('failed-attempts-label').textContent = translations.failedAttempts;
    document.getElementById('last-failed-label').textContent = translations.lastFailedAttempt;
    document.getElementById('clear-attempts-btn').textContent = translations.clearAttempts;
    document.getElementById('email-notif-label').textContent = translations.emailNotifications;
    document.getElementById('course-notif-label').textContent = translations.courseNotifications;
    document.getElementById('test-notif-label').textContent = translations.testNotifications;
    document.getElementById('danger-zone-title').textContent = translations.dangerZone;
    document.getElementById('suspend-user-btn').textContent = translations.suspendUserAccount;
    document.getElementById('delete-user-btn').textContent = translations.deleteUserPermanently;
    document.getElementById('last-updated-label').textContent = translations.lastUpdated;
    document.getElementById('discard-btn').textContent = translations.discardChanges;
    document.getElementById('cancel-btn').textContent = translations.cancel;
    document.getElementById('loading-text').textContent = translations.loading;
}

function getUrlParameter(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
}

async function loadUserData() {
    showLoading(true);

    try {
        const response = await fetch(`/users/api/${currentUserId}`);
        const data = await response.json();

        if (data.success) {
            const user = data.user;
            originalData = { ...user };
            populateForm(user);
            populateUserInfo(user);
            loadUserActivity(currentUserId);
            loadUserStats(currentUserId);
        } else {
            showError(translations.failedToCreateUser);
        }
    } catch (error) {
        console.error('Error loading user:', error);
        showError(translations.errorLoadingUserData);
    } finally {
        showLoading(false);
    }
}

function populateForm(user) {
    // Basic information
    document.getElementById('username').value = user.username || '';
    document.getElementById('email').value = user.email || '';
    document.getElementById('first_name').value = user.first_name || '';
    document.getElementById('last_name').value = user.last_name || '';
    document.getElementById('phone').value = user.phone || '';
    document.getElementById('date_of_birth').value = user.date_of_birth ? user.date_of_birth.split('T')[0] : '';
    document.getElementById('bio').value = user.bio || '';

    // Role and permissions
    if (user.role) {
        document.getElementById(`role-${user.role}`).checked = true;
        updateRoleSelection(user.role);
    }
    document.getElementById('department').value = user.department || '';
    document.getElementById('manager_id').value = user.manager_id || '';

    // Profile details
    document.getElementById('gender').value = user.gender || '';
    document.getElementById('position').value = user.position || '';
    document.getElementById('employee_id').value = user.employee_id || '';
    document.getElementById('timezone').value = user.timezone || 'Asia/Bangkok';

    // Profile picture
    if (user.profile_picture) {
        document.getElementById('profile-preview').src = user.profile_picture;
        document.getElementById('current-avatar').src = user.profile_picture;
    }

    // Account settings
    document.getElementById('is_active').checked = user.is_active;
    document.getElementById('email_verified').checked = user.email_verified;
    document.getElementById('is_locked').checked = user.is_locked;
    document.getElementById('require_password_change').checked = user.require_password_change;
    document.getElementById('email_notifications').checked = user.email_notifications ?? true;
    document.getElementById('course_notifications').checked = user.course_notifications ?? true;
    document.getElementById('test_notifications').checked = user.test_notifications ?? true;

    // Update character count
    updateBioCount();

    // Update last updated
    if (user.updated_at) {
        document.getElementById('last-updated').textContent = new Date(user.updated_at).toLocaleString();
    }
}

function populateUserInfo(user) {
    // User card
    document.getElementById('user-display-name').textContent = `${user.first_name} ${user.last_name}`;
    document.getElementById('user-role-badge').textContent = `@${user.username} • ${user.role?.charAt(0).toUpperCase() + user.role?.slice(1)}`;

    // Status indicator
    const statusIndicator = document.getElementById('status-indicator');
    statusIndicator.className = `block h-6 w-6 rounded-full border-2 border-white ${user.is_active ? 'bg-green-500' : 'bg-gray-500'}`;

    // User badges
    const badgesContainer = document.getElementById('user-badges');
    badgesContainer.innerHTML = '';

    if (user.email_verified) {
        badgesContainer.innerHTML += `<span class="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">${translations.verified}</span>`;
    }

    if (user.is_locked) {
        badgesContainer.innerHTML += `<span class="px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full">${translations.locked}</span>`;
    }

    if (!user.is_active) {
        badgesContainer.innerHTML += `<span class="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">${translations.inactive}</span>`;
    }

    // Dates
    if (user.last_login) {
        document.getElementById('last-login').textContent = new Date(user.last_login).toLocaleDateString();
    } else {
        document.getElementById('last-login').textContent = translations.never;
    }

    document.getElementById('created-date').textContent = new Date(user.created_at).toLocaleDateString();
    document.getElementById('login-count').textContent = user.login_count || 0;

    // Account settings details
    document.getElementById('failed-attempts').textContent = user.failed_login_attempts || 0;

    if (user.last_failed_login) {
        document.getElementById('last-failed-attempt').textContent = new Date(user.last_failed_login).toLocaleString();
    } else {
        document.getElementById('last-failed-attempt').textContent = translations.never;
    }

    if (user.password_changed_at) {
        document.getElementById('last-password-change').textContent = new Date(user.password_changed_at).toLocaleDateString();
    } else {
        document.getElementById('last-password-change').textContent = translations.never;
    }

    // Update status banner
    updateStatusBanner(user);

    // Update current role display
    updateCurrentRoleDisplay(user.role);
}

function updateStatusBanner(user) {
    const banner = document.getElementById('user-status-banner');

    if (!user.is_active) {
        banner.className = 'mb-6 p-4 rounded-lg border border-red-200 bg-red-50';
        banner.innerHTML = `
            <div class="flex items-center">
                <i class="fas fa-exclamation-triangle text-red-600 mr-3"></i>
                <div>
                    <h4 class="text-red-800 font-medium">${translations.accountInactive}</h4>
                    <p class="text-red-700 text-sm">${translations.accountInactive}</p>
                </div>
            </div>
        `;
    } else if (user.is_locked) {
        banner.className = 'mb-6 p-4 rounded-lg border border-orange-200 bg-orange-50';
        banner.innerHTML = `
            <div class="flex items-center">
                <i class="fas fa-lock text-orange-600 mr-3"></i>
                <div>
                    <h4 class="text-orange-800 font-medium">${translations.locked}</h4>
                    <p class="text-orange-700 text-sm">${translations.accountLocked}</p>
                </div>
            </div>
        `;
    } else if (!user.email_verified) {
        banner.className = 'mb-6 p-4 rounded-lg border border-yellow-200 bg-yellow-50';
        banner.innerHTML = `
            <div class="flex items-center">
                <i class="fas fa-envelope text-yellow-600 mr-3"></i>
                <div>
                    <h4 class="text-yellow-800 font-medium">${translations.emailNotVerified}</h4>
                    <p class="text-yellow-700 text-sm">${translations.emailNotVerified}</p>
                </div>
            </div>
        `;
    } else {
        banner.className = 'mb-6 p-4 rounded-lg border border-green-200 bg-green-50';
        banner.innerHTML = `
            <div class="flex items-center">
                <i class="fas fa-check-circle text-green-600 mr-3"></i>
                <div>
                    <h4 class="text-green-800 font-medium">${translations.accountActive}</h4>
                    <p class="text-green-700 text-sm">${translations.active}</p>
                </div>
            </div>
        `;
    }
}

function updateCurrentRoleDisplay(role) {
    const roleNames = {
        student: translations.student,
        instructor: translations.instructor,
        admin: translations.admin
    };

    const roleDescriptions = {
        student: translations.canEnrollInCourses,
        instructor: translations.canCreateManageCourses,
        admin: translations.fullSystemAccess
    };

    const roleColors = {
        student: 'bg-blue-100 text-blue-800',
        instructor: 'bg-green-100 text-green-800',
        admin: 'bg-red-100 text-red-800'
    };

    document.getElementById('current-role-badge').textContent = roleNames[role] || role;
    document.getElementById('current-role-badge').className = `px-3 py-1 rounded-full text-sm font-medium ${roleColors[role] || 'bg-gray-100 text-gray-800'}`;
    document.getElementById('current-role-desc').textContent = roleDescriptions[role] || '';
}

async function loadUserActivity(userId) {
    try {
        const response = await fetch(`/users/api/${userId}/activity`);
        const data = await response.json();

        if (data.success) {
            const activityContainer = document.getElementById('recent-activity');
            activityContainer.innerHTML = '';

            data.activities.forEach(activity => {
                const item = document.createElement('div');
                item.className = 'flex items-center space-x-3 py-2';
                item.innerHTML = `
                    <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <div class="flex-1">
                        <p class="text-sm text-gray-900">${activity.description}</p>
                        <p class="text-xs text-gray-500">${new Date(activity.created_at).toLocaleString()}</p>
                    </div>
                `;
                activityContainer.appendChild(item);
            });

            if (data.activities.length === 0) {
                activityContainer.innerHTML = `<p class="text-sm text-gray-500">${translations.noRecentActivity}</p>`;
            }
        }
    } catch (error) {
        console.error('Error loading activity:', error);
    }
}

async function loadUserStats(userId) {
    try {
        const response = await fetch(`/users/api/${userId}/stats`);
        const data = await response.json();

        if (data.success) {
            document.getElementById('courses-completed').textContent = data.stats.coursesCompleted || 0;
            document.getElementById('tests-taken').textContent = data.stats.testsTaken || 0;
            document.getElementById('avg-score').textContent = (data.stats.averageScore || 0) + '%';
            document.getElementById('certificates-earned').textContent = data.stats.certificatesEarned || 0;
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

async function loadManagers() {
    try {
        const response = await fetch('/users/api/managers');
        const data = await response.json();

        if (data.success) {
            const managerSelect = document.getElementById('manager_id');
            const currentValue = managerSelect.value;

            managerSelect.innerHTML = `<option value="">${translations.selectManager}</option>`;

            data.managers.forEach(manager => {
                if (manager.user_id !== currentUserId) { // Don't allow user to be their own manager
                    const option = document.createElement('option');
                    option.value = manager.user_id;
                    option.textContent = `${manager.first_name} ${manager.last_name} (${manager.username})`;
                    managerSelect.appendChild(option);
                }
            });

            managerSelect.value = currentValue;
        }
    } catch (error) {
        console.error('Error loading managers:', error);
    }
}

function showTab(tabName) {
    // Hide all tab contents
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });

    // Show selected tab content
    document.getElementById(`tab-${tabName}`).classList.add('active');

    // Update tab buttons
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
        button.classList.add('border-transparent', 'text-gray-500');
        button.classList.remove('border-blue-500', 'text-blue-600');
    });

    // Activate current tab button
    event.target.classList.add('active');
    event.target.classList.add('border-blue-500', 'text-blue-600');
    event.target.classList.remove('border-transparent', 'text-gray-500');
}

function handleRoleChange() {
    const selectedRole = document.querySelector('input[name="role"]:checked').value;
    const originalRole = originalData.role;

    // Show warning if role is changing
    const warning = document.getElementById('role-change-warning');
    if (selectedRole !== originalRole) {
        warning.classList.remove('hidden');
    } else {
        warning.classList.add('hidden');
    }

    updateRoleSelection(selectedRole);
}

function updateRoleSelection(role) {
    // Update role card styling
    document.querySelectorAll('.role-card').forEach(card => {
        card.querySelector('div').classList.remove('border-blue-500', 'bg-blue-50');
        card.querySelector('div').classList.add('border-gray-200');
    });

    const selectedCard = document.querySelector(`[data-role="${role}"]`);
    if (selectedCard) {
        selectedCard.querySelector('div').classList.add('border-blue-500', 'bg-blue-50');
        selectedCard.querySelector('div').classList.remove('border-gray-200');
    }
}

async function checkUsernameAvailability() {
    const username = document.getElementById('username').value.trim();
    const indicator = document.getElementById('username-availability');

    if (!username || username === originalData.username) {
        indicator.innerHTML = '';
        return;
    }

    try {
        const response = await fetch(`/users/api/check-username?username=${encodeURIComponent(username)}&exclude=${currentUserId}`);
        const data = await response.json();

        if (data.available) {
            indicator.innerHTML = `<i class="fas fa-check text-green-500"></i> <span class="text-green-500">${translations.usernameAvailable}</span>`;
        } else {
            indicator.innerHTML = `<i class="fas fa-times text-red-500"></i> <span class="text-red-500">${translations.usernameAlreadyTaken}</span>`;
        }
    } catch (error) {
        console.error('Error checking username:', error);
    }
}

async function checkEmailAvailability() {
    const email = document.getElementById('email').value.trim();
    const indicator = document.getElementById('email-availability');

    if (!email || email === originalData.email) {
        indicator.innerHTML = '';
        return;
    }

    try {
        const response = await fetch(`/users/api/check-email?email=${encodeURIComponent(email)}&exclude=${currentUserId}`);
        const data = await response.json();

        if (data.available) {
            indicator.innerHTML = `<i class="fas fa-check text-green-500"></i> <span class="text-green-500">${translations.emailAvailable}</span>`;
        } else {
            indicator.innerHTML = `<i class="fas fa-times text-red-500"></i> <span class="text-red-500">${translations.emailAlreadyRegistered}</span>`;
        }
    } catch (error) {
        console.error('Error checking email:', error);
    }
}

function previewProfilePicture() {
    const file = document.getElementById('profile_picture').files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            document.getElementById('profile-preview').src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
}

function removeProfilePicture() {
    document.getElementById('profile-preview').src = '/images/default-avatar.png';
    document.getElementById('profile_picture').value = '';
}

function updateBioCount() {
    const bio = document.getElementById('bio').value;
    const count = document.getElementById('bio-count');
    count.textContent = bio.length;

    if (bio.length > 500) {
        count.parentElement.classList.add('text-red-500');
    } else {
        count.parentElement.classList.remove('text-red-500');
    }
}

async function submitForm(event) {
    event.preventDefault();

    showLoading(true);

    try {
        const formData = new FormData(document.getElementById('edit-user-form'));

        const response = await fetch(`/users/api/${currentUserId}`, {
            method: 'PUT',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showSuccess(translations.userEditedSuccess);
            // Reload user data to show updated information
            await loadUserData();
        } else {
            showError(data.message || translations.failedToCreateUser);
        }
    } catch (error) {
        console.error('Error updating user:', error);
        showError(translations.errorUpdatingUser);
    } finally {
        showLoading(false);
    }
}

function discardChanges() {
    if (confirm(translations.confirmDiscardChanges)) {
        populateForm(originalData);
        showSuccess(translations.changesDiscarded);
    }
}

function previewUser() {
    const formData = new FormData(document.getElementById('edit-user-form'));
    const modalContent = document.getElementById('modal-preview-content');

    const firstName = formData.get('first_name');
    const lastName = formData.get('last_name');
    const username = formData.get('username');
    const email = formData.get('email');
    const role = formData.get('role');
    const department = formData.get('department');
    const bio = formData.get('bio');

    modalContent.innerHTML = `
        <div class="border border-gray-200 rounded-lg p-4">
            <div class="flex items-start space-x-4">
                <img src="${document.getElementById('profile-preview').src}"
                     alt="Profile" class="h-16 w-16 rounded-full object-cover border-2 border-gray-300">
                <div class="flex-1">
                    <h4 class="text-lg font-semibold text-gray-900">${firstName} ${lastName}</h4>
                    <p class="text-gray-600">@${username}</p>
                    <p class="text-sm text-gray-500">${email}</p>
                    <div class="mt-2">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            ${role?.charAt(0).toUpperCase() + role?.slice(1)}
                        </span>
                        ${department ? `
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 ml-2">
                                ${department}
                            </span>
                        ` : ''}
                    </div>
                </div>
            </div>

            ${bio ? `
                <div class="mt-4 pt-4 border-t border-gray-200">
                    <p class="text-sm text-gray-600">${bio}</p>
                </div>
            ` : ''}
        </div>
    `;

    document.getElementById('preview-modal').classList.remove('hidden');
}

function closePreview() {
    document.getElementById('preview-modal').classList.add('hidden');
}

function resetPassword() {
    showConfirmDialog(
        translations.passwordReset,
        translations.passwordResetConfirm,
        translations.passwordReset,
        async () => {
            try {
                const response = await fetch(`/users/api/${currentUserId}/reset-password`, {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess(translations.passwordResetSuccess);
                } else {
                    showError(data.message || translations.failedToResetPassword);
                }
            } catch (error) {
                console.error('Error resetting password:', error);
                showError(translations.failedToResetPassword);
            }
        }
    );
}

function clearLoginAttempts() {
    showConfirmDialog(
        translations.clearAttemptsTitle,
        translations.clearAttemptsConfirm,
        translations.clearAttempts,
        async () => {
            try {
                const response = await fetch(`/users/api/${currentUserId}/clear-attempts`, {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess(translations.clearAttemptsSuccess);
                    document.getElementById('failed-attempts').textContent = '0';
                } else {
                    showError(data.message || translations.failedToClearAttempts);
                }
            } catch (error) {
                console.error('Error clearing attempts:', error);
                showError(translations.failedToClearAttempts);
            }
        }
    );
}

function suspendUser() {
    showConfirmDialog(
        translations.suspendUserTitle,
        translations.suspendUserConfirm,
        translations.suspendUser,
        async () => {
            try {
                const response = await fetch(`/users/api/${currentUserId}/suspend`, {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess(translations.suspendUserSuccess);
                    await loadUserData();
                } else {
                    showError(data.message || translations.failedToSuspendUser);
                }
            } catch (error) {
                console.error('Error suspending user:', error);
                showError(translations.failedToSuspendUser);
            }
        }
    );
}

function deleteUser() {
    showConfirmDialog(
        translations.deleteUserTitle,
        translations.deleteUserConfirm,
        translations.deleteUser,
        async () => {
            try {
                const response = await fetch(`/users/api/${currentUserId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess(translations.deleteUserSuccess);
                    setTimeout(() => {
                        window.location.href = '/admin/users';
                    }, 2000);
                } else {
                    showError(data.message || translations.failedToDeleteUser);
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showError(translations.failedToDeleteUser);
            }
        },
        'bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700'
    );
}

function showConfirmDialog(title, message, actionText, callback, actionButtonClass = 'bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700') {
    document.getElementById('confirm-title').textContent = title;
    document.getElementById('confirm-message').textContent = message;
    document.getElementById('confirm-action-btn').textContent = actionText;
    document.getElementById('confirm-action-btn').className = actionButtonClass;
    document.getElementById('confirm-dialog').classList.remove('hidden');
    confirmCallback = callback;
}

function closeConfirmDialog() {
    document.getElementById('confirm-dialog').classList.add('hidden');
    confirmCallback = null;
}

async function confirmAction() {
    if (confirmCallback) {
        closeConfirmDialog();
        await confirmCallback();
    }
}

function showLoading(show) {
    const overlay = document.getElementById('loading-overlay');
    overlay.classList.toggle('hidden', !show);
}

function showSuccess(message) {
    // You can implement a toast notification system here
    alert(message);
}

function showError(message) {
    // You can implement a toast notification system here
    alert('Error: ' + message);
}
</script>

<%- include('../partials/footer') %>