<div class="bg-gradient-to-br from-ruxchai-primary/5 to-ruxchai-secondary/5 min-h-screen">
    <div class="container mx-auto px-6 py-8">
        <!-- Header Section -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div class="mb-4 md:mb-0">
                <h1 class="text-3xl font-bold text-gray-900 mb-2"><%= t('usersManagement') %></h1>
                <p class="text-gray-600"><%= t('userManagementSystem') %></p>
            </div>
            <div class="flex space-x-3">
                <button id="exportBtn" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors shadow-md">
                    <i class="fas fa-download mr-2"></i><%= t('exportData') %>
                </button>
                <button id="addUserBtn" class="bg-ruxchai-primary text-white px-6 py-3 rounded-lg hover:bg-ruxchai-primary/90 transition-colors shadow-md">
                    <i class="fas fa-plus mr-2"></i><%= t('addNewUser') %>
                </button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-blue-100 p-3 rounded-lg">
                        <i class="fas fa-users text-blue-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500"><%= t('totalUsers') %></h3>
                        <p id="totalUsers" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-green-100 p-3 rounded-lg">
                        <i class="fas fa-user-check text-green-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500"><%= t('activeUsers') %></h3>
                        <p id="activeUsers" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-yellow-100 p-3 rounded-lg">
                        <i class="fas fa-user-clock text-yellow-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500"><%= t('pendingUsers') %></h3>
                        <p id="pendingUsers" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
                <div class="flex items-center">
                    <div class="bg-purple-100 p-3 rounded-lg">
                        <i class="fas fa-user-graduate text-purple-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-sm font-medium text-gray-500"><%= t('newUsers') %></h3>
                        <p id="newUsers" class="text-2xl font-bold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="relative">
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    <input type="text" id="searchUsers" placeholder="<%= t('searchUsers') %>"
                           class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent">
                </div>
                <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent">
                    <option value=""><%= t('allStatuses') %></option>
                    <option value="active"><%= t('statusActive') %></option>
                    <option value="inactive"><%= t('statusInactive') %></option>
                    <option value="pending"><%= t('statusPending') %></option>
                    <option value="suspended"><%= t('statusSuspended') %></option>
                </select>
                <select id="roleFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent">
                    <option value=""><%= t('allRoles') %></option>
                    <option value="admin"><%= t('roleAdmin') %></option>
                    <option value="hr"><%= t('roleHR') %></option>
                    <option value="manager"><%= t('roleManager') %></option>
                    <option value="employee"><%= t('roleEmployee') %></option>
                    <option value="learner"><%= t('roleLearner') %></option>
                </select>
                <select id="departmentFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent">
                    <option value=""><%= t('allDepartments') %></option>
                    <!-- Departments will be loaded dynamically -->
                </select>
                <select id="sortBy" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent">
                    <option value="latest"><%= t('sortLatest') %></option>
                    <option value="name_asc"><%= t('sortNameAZ') %></option>
                    <option value="name_desc"><%= t('sortNameZA') %></option>
                    <option value="oldest"><%= t('sortOldest') %></option>
                    <option value="last_active"><%= t('sortLastActive') %></option>
                </select>
            </div>
        </div>

        <!-- Bulk Actions -->
        <div id="bulkActions" class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6 hidden">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <span class="text-sm text-gray-700"><%= t('selected') %> <span id="selectedCount">0</span> <%= t('itemsText') %></span>
                </div>
                <div class="flex space-x-2">
                    <button id="bulkApproveBtn" class="px-4 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700">
                        <i class="fas fa-check mr-2"></i><%= t('approve') %>
                    </button>
                    <button id="bulkSuspendBtn" class="px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700">
                        <i class="fas fa-ban mr-2"></i><%= t('suspend') %>
                    </button>
                    <button id="bulkDeleteBtn" class="px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700">
                        <i class="fas fa-trash mr-2"></i><%= t('delete') %>
                    </button>
                    <button id="clearSelectionBtn" class="px-4 py-2 text-gray-600 border border-gray-300 text-sm rounded-lg hover:bg-gray-50">
                        <%= t('clearSelection') %>
                    </button>
                </div>
            </div>
        </div>

        <!-- Users Grid -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <!-- Select All Header -->
            <div class="flex items-center justify-between mb-6 pb-4 border-b border-gray-200">
                <div class="flex items-center">
                    <input type="checkbox" id="selectAll" class="rounded border-gray-300 text-ruxchai-primary focus:ring-ruxchai-primary mr-3">
                    <label for="selectAll" class="text-sm font-medium text-gray-700"><%= t('selectAll') %></label>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-500">
                        <%= t('showing') %> <span id="displayCount">0</span> <%= t('usersText') %>
                    </div>
                    <!-- View Toggle Buttons -->
                    <div class="flex items-center space-x-2">
                        <span class="text-sm text-gray-500 mr-2"><%= t('viewMode') %>:</span>
                        <button id="listViewBtn" onclick="switchView('list')" class="px-3 py-1 bg-ruxchai-primary text-white rounded-lg transition-colors">
                            <i class="fas fa-list mr-1"></i><%= t('listView') %>
                        </button>
                        <button id="gridViewBtn" onclick="switchView('grid')" class="px-3 py-1 bg-gray-200 text-gray-600 rounded-lg hover:bg-gray-300 transition-colors">
                            <i class="fas fa-th-large mr-1"></i><%= t('gridView') %>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Users Card Grid -->
            <div id="usersGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                <!-- User cards will be loaded here -->
            </div>

            <!-- Users List View -->
            <div id="usersList" class="hidden space-y-3">
                <!-- User cards will be loaded here -->
            </div>

            <!-- Loading State -->
            <div id="loadingState" class="p-8 text-center">
                <div class="inline-flex items-center">
                    <i class="fas fa-spinner fa-spin mr-2"></i>
                    <%= t('loading') %>
                </div>
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="p-8 text-center hidden">
                <i class="fas fa-users text-gray-400 text-4xl mb-4"></i>
                <p class="text-gray-500"><%= t('noUsers') %></p>
            </div>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="flex justify-center space-x-2 mt-8">
            <!-- Pagination will be loaded here -->
        </div>
    </div>
</div>

<!-- Add User Modal -->
<div id="addUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-xl font-bold text-gray-900"><%= t('addNewUser') %></h3>
                <button id="closeAddModal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="addUserForm" class="p-6 space-y-6">
                <!-- Profile Image Upload Section -->
                <div class="flex flex-col items-center mb-6 pb-6 border-b border-gray-200">
                    <div class="relative mb-4">
                        <img id="profilePreview" src="/images/default-avatar.png" alt="Profile Preview"
                             class="w-24 h-24 rounded-full object-cover border-4 border-gray-200">
                        <label for="profileImageInput" class="absolute bottom-0 right-0 bg-ruxchai-primary text-white p-2 rounded-full cursor-pointer hover:bg-ruxchai-primary/90 transition-colors">
                            <i class="fas fa-camera text-sm"></i>
                        </label>
                        <input type="file" id="profileImageInput" name="profile_image" accept="image/*" class="hidden">
                    </div>
                    <p class="text-xs text-gray-500"><%= t('uploadProfileImage') %></p>
                </div>

                <!-- Basic Information Section -->
                <div class="border-b border-gray-200 pb-6 mb-6">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-ruxchai-primary/10 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-user-circle text-ruxchai-primary"></i>
                        </div>
                        <%= t('personalInfo') %>
                    </h4>

                    <div class="space-y-4">
                        <!-- User Type -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <%= t('userType') %> <span class="text-red-500">*</span>
                            </label>
                            <select name="user_type" id="userTypeSelect" required onchange="handleUserTypeChange()"
                                    class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                <option value=""><%= t('selectUserType') %></option>
                                <option value="employee"><%= t('employeeWithAccess') %></option>
                                <option value="applicant"><%= t('applicantNoAccess') %></option>
                            </select>
                        </div>

                        <!-- Employee ID - Only for Employee -->
                        <div id="employeeIdField" class="hidden">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-id-badge text-ruxchai-primary mr-1"></i>
                                <%= t('employeeId') %> <span class="text-red-500">*</span>
                            </label>
                            <input type="text" name="employee_id" id="employeeIdInput"
                                   class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                   placeholder="<%= t('employeeId') %>">
                        </div>

                        <!-- ID Card - Only for Applicant -->
                        <div id="idCardField" class="hidden">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-id-card text-gray-400 mr-1"></i>
                                <%= t('idCardNumber') %> <span class="text-red-500">*</span>
                            </label>
                            <input type="text" name="id_card_number" id="idCardInput" maxlength="13"
                                   class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                   placeholder="1234567890123">
                        </div>

                        <!-- Name Fields - Grid Layout -->
                        <div id="nameFields" class="grid grid-cols-1 md:grid-cols-2 gap-4 hidden">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('firstName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" name="first_name" id="firstNameInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="<%= t('firstName') %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('lastName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" name="last_name" id="lastNameInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="<%= t('lastName') %>">
                            </div>
                        </div>

                        <!-- Contact Fields - Grid Layout -->
                        <div id="contactFields" class="grid grid-cols-1 md:grid-cols-2 gap-4 hidden">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-envelope text-gray-400 mr-1"></i>
                                    <%= t('emailAddress') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="email" name="email" id="emailInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="example@email.com">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-phone text-gray-400 mr-1"></i>
                                    <%= t('phoneNumber') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="tel" name="phone" id="phoneInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="0812345678">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Organization Information Section (Only for Employees) -->
                <div id="organizationSection" class="border-b border-gray-200 pb-6 mb-6 hidden">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-building text-blue-600"></i>
                        </div>
                        <%= t('organizationInfo') %>
                    </h4>

                    <div class="space-y-4">
                        <!-- Organization Units - Cascade Selection -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div id="branchField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-code-branch text-gray-400 mr-1"></i>
                                    <%= t('branches') %>
                                </label>
                                <select name="branch_id" id="branchSelect" onchange="loadOfficesByBranch(this.value)"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value=""><%= t('selectBranch') %></option>
                                </select>
                            </div>
                            <div id="officeField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-building text-gray-400 mr-1"></i>
                                    <%= t('offices') %>
                                </label>
                                <select name="office_id" id="officeSelect" onchange="loadDivisionsByOffice(this.value)"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value=""><%= t('selectOffice') %></option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div id="divisionField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-layer-group text-gray-400 mr-1"></i>
                                    <%= t('divisions') %>
                                </label>
                                <select name="division_id" id="divisionSelect" onchange="loadDepartmentsByDivision(this.value)"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value=""><%= t('selectDivision') %></option>
                                </select>
                            </div>
                            <div id="departmentField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-sitemap text-gray-400 mr-1"></i>
                                    <%= t('departments') %>
                                </label>
                                <select name="department_id" id="departmentSelect"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value=""><%= t('selectDepartment') %></option>
                                </select>
                            </div>
                        </div>

                        <!-- Position -->
                        <div id="positionField">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-briefcase text-gray-400 mr-1"></i>
                                <%= t('positionName') %> <span class="text-red-500">*</span>
                            </label>
                            <select name="position_id" id="addPositionSelect"
                                    class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                <option value=""><%= t('selectPosition') %></option>
                                <!-- Positions will be loaded dynamically -->
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Applicant Information Section (Only for Applicants) -->
                <div id="applicantSection" class="border-b border-gray-200 pb-6 mb-6 hidden">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-briefcase text-green-600"></i>
                        </div>
                        <%= t('applicationInfo') %>
                    </h4>

                    <div class="space-y-4">
                        <div id="appliedPositionField">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                <i class="fas fa-user-tag text-gray-400 mr-1"></i>
                                <%= t('appliedPosition') %> <span class="text-red-500">*</span>
                            </label>
                            <select name="applied_position_id" id="appliedPositionSelect"
                                    class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                <option value=""><%= t('selectAppliedPosition') %></option>
                                <!-- Positions will be loaded dynamically -->
                            </select>
                        </div>
                    </div>
                </div>

                <!-- System Access (Only for Employees) -->
                <div id="systemAccessSection" class="border-b border-gray-200 pb-6 mb-6 hidden">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-purple-50 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-key text-purple-600"></i>
                        </div>
                        <%= t('systemAccess') %>
                    </h4>

                    <div class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div id="roleField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-user-shield text-gray-400 mr-1"></i>
                                    <%= t('role') %> <span class="text-red-500">*</span>
                                </label>
                                <select name="role" id="roleSelect"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value=""><%= t('selectRole') %></option>
                                    <option value="employee">👤 <%= t('roleEmployee') %></option>
                                    <option value="manager">👔 <%= t('roleManager') %></option>
                                    <option value="hr">💼 <%= t('roleHR') %></option>
                                    <option value="admin">⚙️ <%= t('roleAdmin') %></option>
                                </select>
                            </div>
                            <div id="statusField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-toggle-on text-gray-400 mr-1"></i>
                                    <%= t('status') %>
                                </label>
                                <select name="status"
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value="active">✅ <%= t('statusActive') %></option>
                                    <option value="pending">⏳ <%= t('statusPending') %></option>
                                    <option value="inactive">❌ <%= t('statusInactive') %></option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div id="passwordField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-lock text-gray-400 mr-1"></i>
                                    <%= t('password') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="password" name="password" id="passwordInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="••••••••">
                            </div>
                            <div id="confirmPasswordField">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-lock text-gray-400 mr-1"></i>
                                    <%= t('confirmPassword') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="password" name="confirm_password" id="confirmPasswordInput"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="••••••••">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                    <button type="button" id="cancelAdd"
                            class="px-6 py-2.5 text-gray-700 font-medium bg-white border-2 border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all">
                        <i class="fas fa-times mr-2"></i><%= t('cancel') %>
                    </button>
                    <button type="submit"
                            class="px-6 py-2.5 bg-ruxchai-primary text-white font-medium rounded-lg hover:bg-ruxchai-primary/90 transition-all shadow-sm hover:shadow-md">
                        <i class="fas fa-user-plus mr-2"></i><%= t('addUser') %>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div id="editUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-xl font-bold text-gray-900"><%= t('editUser') %></h3>
                <button id="closeEditModal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form id="editUserForm" class="p-6 space-y-6">
                <input type="hidden" name="user_id" id="editUserId">

                <!-- Basic Information Section -->
                <div class="border-b border-gray-200 pb-6 mb-6">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-ruxchai-primary/10 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-user-circle text-ruxchai-primary"></i>
                        </div>
                        <%= t('personalInfo') %>
                    </h4>

                    <div class="space-y-4">
                        <!-- Name Fields -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('firstName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" name="first_name" id="editFirstName" required
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="<%= t('firstName') %>">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <%= t('lastName') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="text" name="last_name" id="editLastName" required
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="<%= t('lastName') %>">
                            </div>
                        </div>

                        <!-- Contact Fields -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-envelope text-gray-400 mr-1"></i>
                                    <%= t('emailAddress') %> <span class="text-red-500">*</span>
                                </label>
                                <input type="email" name="email" id="editEmail" required
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="example@email.com">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-phone text-gray-400 mr-1"></i>
                                    <%= t('phoneNumber') %>
                                </label>
                                <input type="tel" name="phone" id="editPhone"
                                       class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all"
                                       placeholder="0812345678">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- System Access Section -->
                <div class="border-b border-gray-200 pb-6 mb-6">
                    <h4 class="text-base font-semibold text-gray-800 mb-4 flex items-center">
                        <div class="w-8 h-8 bg-purple-50 rounded-lg flex items-center justify-center mr-3">
                            <i class="fas fa-key text-purple-600"></i>
                        </div>
                        <%= t('systemAccess') %>
                    </h4>

                    <div class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-user-shield text-gray-400 mr-1"></i>
                                    <%= t('role') %> <span class="text-red-500">*</span>
                                </label>
                                <select name="role" id="editRole" required
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value="Student">👤 <%= t('roleEmployee') %></option>
                                    <option value="Instructor">👨‍🏫 Instructor</option>
                                    <option value="HR">💼 <%= t('roleHR') %></option>
                                    <option value="Admin">⚙️ <%= t('roleAdmin') %></option>
                                    <option value="SuperAdmin">🔐 Super Admin</option>
                                    <option value="Viewer">👁️ Viewer</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    <i class="fas fa-toggle-on text-gray-400 mr-1"></i>
                                    <%= t('status') %> <span class="text-red-500">*</span>
                                </label>
                                <select name="status" id="editStatus" required
                                        class="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-ruxchai-primary focus:border-transparent transition-all">
                                    <option value="active">✅ <%= t('statusActive') %></option>
                                    <option value="inactive">❌ <%= t('statusInactive') %></option>
                                    <option value="pending">⏳ <%= t('statusPending') %></option>
                                    <option value="suspended">🚫 <%= t('statusSuspended') %></option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                    <button type="button" id="cancelEdit"
                            class="px-6 py-2.5 text-gray-700 font-medium bg-white border-2 border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-all">
                        <i class="fas fa-times mr-2"></i><%= t('cancel') %>
                    </button>
                    <button type="submit"
                            class="px-6 py-2.5 bg-ruxchai-primary text-white font-medium rounded-lg hover:bg-ruxchai-primary/90 transition-all shadow-sm hover:shadow-md">
                        <i class="fas fa-save mr-2"></i><%= t('saveChanges') %>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Translation strings - Server-rendered from backend
const translations = {
    // Status translations
    statusActive: '<%= t("statusActive") %>',
    statusInactive: '<%= t("statusInactive") %>',
    statusPending: '<%= t("statusPending") %>',
    statusSuspended: '<%= t("statusSuspended") %>',

    // Role translations
    roleAdmin: '<%= t("roleAdmin") %>',
    roleHR: '<%= t("roleHR") %>',
    roleManager: '<%= t("roleManager") %>',
    roleEmployee: '<%= t("roleEmployee") %>',
    roleLearner: '<%= t("roleLearner") %>',

    // Action translations
    view: '<%= t("view") %>',
    edit: '<%= t("edit") %>',
    suspend: '<%= t("suspend") %>',
    activate: '<%= t("activate") %>',
    delete: '<%= t("delete") %>',

    // Message translations
    errorLoadingData: '<%= t("errorLoadingData") %>',
    errorLoadingUser: '<%= t("errorLoadingUser") %>',
    passwordMismatch: '<%= t("passwordMismatch") %>',
    userAddedSuccess: '<%= t("userAddedSuccess") %>',
    error: '<%= t("error") %>',
    userAddError: '<%= t("userAddError") %>',
    userEditedSuccess: '<%= t("userEditedSuccess") %>',
    userEditError: '<%= t("userEditError") %>',
    confirmSuspendUser: '<%= t("confirmSuspendUser") %>',
    userSuspendedSuccess: '<%= t("userSuspendedSuccess") %>',
    userActivatedSuccess: '<%= t("userActivatedSuccess") %>',
    confirmDeleteUser: '<%= t("confirmDeleteUser") %>',
    userDeletedSuccess: '<%= t("userDeletedSuccess") %>',
    exportError: '<%= t("exportError") %>',

    // Bulk action translations
    approve: '<%= t("approve") %>',
    approveAction: '<%= t("approve") %>',
    suspendAction: '<%= t("suspend") %>',
    deleteAction: '<%= t("delete") %>',
    confirmBulkAction: '<%= t("confirmBulkAction") %>',
    bulkActionSuccess: '<%= t("bulkActionSuccess") %>',

    // General translations
    noDepartment: '<%= t("noDepartment") %>',
    lastActiveNever: '<%= t("lastActiveNever") %>',
    lastActive: '<%= t("lastActive") %>',
    viewDetails: '<%= t("viewDetails") %>',
    editAction: '<%= t("edit") %>',
    suspendAction: '<%= t("suspend") %>',
    activateAction: '<%= t("activate") %>',
    deleteAction: '<%= t("delete") %>',
    selectBranch: '<%= t("selectBranch") %>',
    selectOffice: '<%= t("selectOffice") %>',
    selectDivision: '<%= t("selectDivision") %>',
    selectDepartment: '<%= t("selectDepartment") %>',
    selectPosition: '<%= t("selectPosition") %>',
    selectAppliedPosition: '<%= t("selectAppliedPosition") %>',
    allDepartments: '<%= t("allDepartments") %>',
    unit: '<%= t("unit") %>'
};

// Global variables
let currentPage = 1;
let users = [];
let selectedUsers = [];
let currentView = localStorage.getItem('usersView') || 'list'; // 'grid' or 'list'

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    switchView(currentView, false); // Initialize view from localStorage
    loadUsers();
    loadOrganizationUnits();
    loadPositions();
    setupEventListeners();
    setupProfileImagePreview();
});

// Event listeners
function setupEventListeners() {
    // Add user modal
    document.getElementById('addUserBtn').addEventListener('click', () => {
        document.getElementById('addUserModal').classList.remove('hidden');
        // Load organization dropdowns
        loadBranchesForAdd();
        loadPositions();
    });

    document.getElementById('closeAddModal').addEventListener('click', closeAddModal);
    document.getElementById('cancelAdd').addEventListener('click', closeAddModal);

    // Edit user modal
    document.getElementById('closeEditModal').addEventListener('click', closeEditModal);
    document.getElementById('cancelEdit').addEventListener('click', closeEditModal);

    // Form submissions
    document.getElementById('addUserForm').addEventListener('submit', handleAddUser);
    document.getElementById('editUserForm').addEventListener('submit', handleEditUser);

    // Search and filters
    document.getElementById('searchUsers').addEventListener('input', debounce(loadUsers, 300));
    document.getElementById('statusFilter').addEventListener('change', loadUsers);
    document.getElementById('roleFilter').addEventListener('change', loadUsers);
    document.getElementById('departmentFilter').addEventListener('change', loadUsers);
    document.getElementById('sortBy').addEventListener('change', loadUsers);

    // Select all checkbox
    document.getElementById('selectAll').addEventListener('change', handleSelectAll);

    // Bulk actions
    document.getElementById('bulkApproveBtn').addEventListener('click', () => handleBulkAction('approve'));
    document.getElementById('bulkSuspendBtn').addEventListener('click', () => handleBulkAction('suspend'));
    document.getElementById('bulkDeleteBtn').addEventListener('click', () => handleBulkAction('delete'));
    document.getElementById('clearSelectionBtn').addEventListener('click', clearSelection);

    // Export
    document.getElementById('exportBtn').addEventListener('click', exportUsers);
}

// Load users
async function loadUsers() {
    try {
        document.getElementById('loadingState').classList.remove('hidden');
        document.getElementById('emptyState').classList.add('hidden');

        const search = document.getElementById('searchUsers').value;
        const status = document.getElementById('statusFilter').value;
        const role = document.getElementById('roleFilter').value;
        const department = document.getElementById('departmentFilter').value;
        const sort = document.getElementById('sortBy').value;

        const params = new URLSearchParams({
            page: currentPage,
            search,
            status,
            role,
            department,
            sort
        });

        const response = await fetch(`/users/api/list?${params}`);
        const data = await response.json();

        if (data.success) {
            users = data.users;
            displayUsers();
            updateStats(data.stats);
            updatePagination(data.pagination);

            if (users.length === 0) {
                document.getElementById('emptyState').classList.remove('hidden');
            }
        }
    } catch (error) {
        console.error('Error loading users:', error);
        showMessage(translations.errorLoadingData, 'error');
    } finally {
        document.getElementById('loadingState').classList.add('hidden');
    }
}

// Display users
function displayUsers() {
    const displayCount = document.getElementById('displayCount');
    displayCount.textContent = users.length;

    if (currentView === 'grid') {
        const grid = document.getElementById('usersGrid');
        grid.innerHTML = users.map(user => createUserCard(user)).join('');
    } else {
        const listView = document.getElementById('usersList');
        listView.innerHTML = users.map(user => createUserRow(user)).join('');
    }
}

// Switch between grid and list view
function switchView(view, save = true) {
    currentView = view;

    const gridView = document.getElementById('usersGrid');
    const listView = document.getElementById('usersList');
    const gridBtn = document.getElementById('gridViewBtn');
    const listBtn = document.getElementById('listViewBtn');

    if (view === 'grid') {
        gridView.classList.remove('hidden');
        gridView.classList.add('grid');
        listView.classList.add('hidden');
        listView.classList.remove('space-y-3');

        gridBtn.classList.remove('bg-gray-200', 'text-gray-600');
        gridBtn.classList.add('bg-ruxchai-primary', 'text-white');

        listBtn.classList.remove('bg-ruxchai-primary', 'text-white');
        listBtn.classList.add('bg-gray-200', 'text-gray-600');
    } else {
        gridView.classList.add('hidden');
        gridView.classList.remove('grid');
        listView.classList.remove('hidden');
        listView.classList.add('space-y-3');

        listBtn.classList.remove('bg-gray-200', 'text-gray-600');
        listBtn.classList.add('bg-ruxchai-primary', 'text-white');

        gridBtn.classList.remove('bg-ruxchai-primary', 'text-white');
        gridBtn.classList.add('bg-gray-200', 'text-gray-600');
    }

    // Save preference to localStorage
    if (save) {
        localStorage.setItem('usersView', view);
    }

    displayUsers();
}

// Create user card
function createUserCard(user) {
    const statusBadge = getStatusBadge(user.status);
    const roleBadge = getRoleBadge(user.role);

    return `
        <div class="bg-white border border-gray-200 rounded-xl p-5 hover:shadow-lg transition-all duration-300 relative group">
            <!-- Checkbox -->
            <div class="absolute top-4 right-4">
                <input type="checkbox" class="user-checkbox rounded border-gray-300 text-ruxchai-primary focus:ring-ruxchai-primary"
                       value="${user.user_id}" onchange="handleUserSelection(this)">
            </div>

            <!-- User Avatar and Info -->
            <div class="flex flex-col items-center text-center mb-4 pt-2">
                <div class="relative mb-3">
                    <img src="${user.profile_image || '/images/default-avatar.png'}"
                         alt="${user.first_name} ${user.last_name}"
                         class="w-20 h-20 rounded-full object-cover border-4 border-gray-100">
                    <!-- Online indicator (optional) -->
                    <div class="absolute bottom-1 right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full"></div>
                </div>

                <h3 class="font-semibold text-gray-900 text-lg mb-1">${user.first_name} ${user.last_name}</h3>
                <p class="text-sm text-gray-500 mb-2">${user.email}</p>
                ${user.phone ? `<p class="text-xs text-gray-400"><i class="fas fa-phone mr-1"></i>${user.phone}</p>` : ''}
            </div>

            <!-- Role and Status Badges -->
            <div class="flex justify-center space-x-2 mb-4">
                ${roleBadge}
                ${statusBadge}
            </div>

            <!-- Department and Position -->
            <div class="bg-gray-50 rounded-lg p-3 mb-4 text-center">
                <div class="text-sm">
                    <div class="flex items-center justify-center mb-1">
                        <i class="fas fa-building text-gray-400 mr-2 text-xs"></i>
                        <span class="text-gray-700 font-medium">${user.department_name || translations.noDepartment}</span>
                    </div>
                    ${user.position ? `
                        <div class="flex items-center justify-center">
                            <i class="fas fa-briefcase text-gray-400 mr-2 text-xs"></i>
                            <span class="text-gray-500 text-xs">${user.position}</span>
                        </div>
                    ` : ''}
                </div>
            </div>

            <!-- Last Active -->
            <div class="text-center mb-4 pb-4 border-b border-gray-200">
                <p class="text-xs text-gray-500">
                    <i class="fas fa-clock mr-1"></i>
                    ${user.last_active ? translations.lastActive + ': ' + formatDate(user.last_active) : translations.lastActiveNever}
                </p>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-center space-x-2">
                <button onclick="viewUser(${user.user_id})"
                        class="flex-1 bg-blue-50 text-blue-600 hover:bg-blue-100 px-3 py-2 rounded-lg transition-colors text-sm font-medium"
                        title="${translations.viewDetails}">
                    <i class="fas fa-eye mr-1"></i>${translations.view}
                </button>
                <button onclick="editUser(${user.user_id})"
                        class="flex-1 bg-green-50 text-green-600 hover:bg-green-100 px-3 py-2 rounded-lg transition-colors text-sm font-medium"
                        title="${translations.editAction}">
                    <i class="fas fa-edit mr-1"></i>${translations.edit}
                </button>
                ${user.status !== 'suspended' ? `
                    <button onclick="suspendUser(${user.user_id})"
                            class="flex-1 bg-red-50 text-red-600 hover:bg-red-100 px-3 py-2 rounded-lg transition-colors text-sm font-medium"
                            title="${translations.suspendAction}">
                        <i class="fas fa-ban mr-1"></i>${translations.suspend}
                    </button>
                ` : `
                    <button onclick="activateUser(${user.user_id})"
                            class="flex-1 bg-green-50 text-green-600 hover:bg-green-100 px-3 py-2 rounded-lg transition-colors text-sm font-medium"
                            title="${translations.activateAction}">
                        <i class="fas fa-check mr-1"></i>${translations.activate}
                    </button>
                `}
                <button onclick="deleteUser(${user.user_id})"
                        class="bg-gray-50 text-gray-600 hover:bg-gray-100 px-3 py-2 rounded-lg transition-colors text-sm"
                        title="${translations.deleteAction}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
}

// Create user row for list view (card style)
function createUserRow(user) {
    const statusBadge = getStatusBadge(user.status);
    const roleBadge = getRoleBadge(user.role);
    const roleColor = user.role === 'admin' ? 'purple' : user.role === 'hr' ? 'blue' : user.role === 'manager' ? 'orange' : 'green';

    return `
        <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all duration-300">
            <div class="flex items-center justify-between">
                <!-- Left: User Info -->
                <div class="flex items-center flex-1">
                    <div class="w-12 h-12 rounded-lg bg-${roleColor}-100 flex items-center justify-center mr-4 relative">
                        <img class="w-12 h-12 rounded-lg object-cover"
                             src="${user.profile_image || '/images/default-avatar.png'}"
                             alt="${user.first_name} ${user.last_name}">
                        ${user.is_active ? '<div class="absolute bottom-0 right-0 w-3 h-3 bg-green-500 border-2 border-white rounded-full"></div>' : ''}
                    </div>
                    <div class="flex-1">
                        <div class="flex items-center space-x-2 mb-1">
                            <h3 class="font-semibold text-gray-900 text-lg">${user.first_name} ${user.last_name}</h3>
                            ${roleBadge}
                            ${statusBadge}
                        </div>
                        <div class="flex items-center space-x-4 text-sm text-gray-500">
                            <div class="flex items-center">
                                <i class="fas fa-envelope text-gray-400 mr-1"></i>
                                <span>${user.email}</span>
                            </div>
                            ${user.phone ? `
                                <div class="flex items-center">
                                    <i class="fas fa-phone text-gray-400 mr-1"></i>
                                    <span>${user.phone}</span>
                                </div>
                            ` : ''}
                            ${user.department_name ? `
                                <div class="flex items-center">
                                    <i class="fas fa-building text-gray-400 mr-1"></i>
                                    <span>${user.department_name}</span>
                                </div>
                            ` : ''}
                            ${user.position ? `
                                <div class="flex items-center">
                                    <i class="fas fa-briefcase text-gray-400 mr-1"></i>
                                    <span>${user.position}</span>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>

                <!-- Right: Action Buttons -->
                <div class="flex items-center space-x-2 ml-4">
                    <button onclick="viewUser(${user.user_id})"
                            class="bg-blue-50 text-blue-600 hover:bg-blue-100 px-4 py-2 rounded-lg transition-colors text-sm font-medium"
                            title="${translations.viewDetails}">
                        <i class="fas fa-eye mr-1"></i>${translations.viewDetails}
                    </button>
                    <button onclick="editUser(${user.user_id})"
                            class="bg-green-50 text-green-600 hover:bg-green-100 px-4 py-2 rounded-lg transition-colors text-sm font-medium"
                            title="${translations.editAction}">
                        <i class="fas fa-edit mr-1"></i>${translations.editAction}
                    </button>
                    ${user.status !== 'suspended' ? `
                        <button onclick="suspendUser(${user.user_id})"
                                class="bg-red-50 text-red-600 hover:bg-red-100 px-3 py-2 rounded-lg transition-colors text-sm"
                                title="${translations.suspendAction}">
                            <i class="fas fa-ban"></i>
                        </button>
                    ` : `
                        <button onclick="activateUser(${user.user_id})"
                                class="bg-green-50 text-green-600 hover:bg-green-100 px-3 py-2 rounded-lg transition-colors text-sm"
                                title="${translations.activateAction}">
                            <i class="fas fa-check"></i>
                        </button>
                    `}
                    <button onclick="deleteUser(${user.user_id})"
                            class="bg-gray-50 text-gray-600 hover:bg-gray-100 px-3 py-2 rounded-lg transition-colors text-sm"
                            title="${translations.deleteAction}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Status and role badges
function getStatusBadge(status) {
    const badges = {
        active: `<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">${translations.statusActive}</span>`,
        inactive: `<span class="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">${translations.statusInactive}</span>`,
        pending: `<span class="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">${translations.statusPending}</span>`,
        suspended: `<span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">${translations.statusSuspended}</span>`
    };
    return badges[status] || '';
}

function getRoleBadge(role) {
    const badges = {
        admin: `<span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">${translations.roleAdmin}</span>`,
        hr: `<span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${translations.roleHR}</span>`,
        manager: `<span class="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">${translations.roleManager}</span>`,
        employee: `<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">${translations.roleEmployee}</span>`,
        learner: `<span class="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">${translations.roleLearner}</span>`
    };
    return badges[role] || '';
}

// Load organization units - Load branches (top level)
async function loadOrganizationUnits() {
    try {
        const response = await fetch('/organization/api/units');
        const data = await response.json();

        if (data.success) {
            const branchSelect = document.getElementById('branchSelect');
            const departmentFilter = document.getElementById('departmentFilter');

            // Get branches only (level_code = 'BRANCH' and has parent - exclude company)
            const branches = data.data.filter(unit =>
                unit.level_code === 'BRANCH' && unit.parent_id !== null
            );

            // Load branches for add user form
            if (branchSelect) {
                branchSelect.innerHTML = `<option value="">${translations.selectBranch}</option>` +
                    branches.map(unit => `<option value="${unit.unit_id}">${unit.unit_name_th}</option>`).join('');
            }

            // Keep department filter for backward compatibility
            if (departmentFilter) {
                departmentFilter.innerHTML = `<option value="">${translations.allDepartments}</option>` +
                    data.data.map(unit => {
                        const levelName = unit.level_name_th || translations.unit;
                        return `<option value="${unit.unit_id}">${levelName} ${unit.unit_name_th}</option>`;
                    }).join('');
            }
        }
    } catch (error) {
        console.error('Error loading organization units:', error);
    }
}

// Load branches for Add User modal
async function loadBranchesForAdd() {
    const branchSelect = document.getElementById('branchSelect');

    try {
        console.log('Loading branches...');
        const response = await fetch('/organization/api/branches');
        console.log('Branches API response status:', response.status);

        const data = await response.json();
        console.log('Branches API data:', data);

        branchSelect.innerHTML = `<option value="">${translations.selectBranch}</option>`;
        if (data && Array.isArray(data)) {
            console.log('Found', data.length, 'branches');
            branchSelect.innerHTML += data.map(branch => {
                console.log('Adding branch:', branch.branch_name, 'ID:', branch.branch_id);
                return `<option value="${branch.branch_id}">${branch.branch_name}</option>`;
            }).join('');
        } else {
            console.warn('Data is not an array:', data);
        }
        console.log('Branch select HTML:', branchSelect.innerHTML);
    } catch (error) {
        console.error('Error loading branches:', error);
    }
}

// Load offices by branch (cascade)
async function loadOfficesByBranch(branchId) {
    console.log('=== loadOfficesByBranch called ===');
    console.log('Branch ID:', branchId);

    const officeSelect = document.getElementById('officeSelect');
    const divisionSelect = document.getElementById('divisionSelect');
    const departmentSelect = document.getElementById('departmentSelect');

    // Reset child dropdowns
    officeSelect.innerHTML = `<option value="">${translations.selectOffice}</option>`;
    divisionSelect.innerHTML = `<option value="">${translations.selectDivision}</option>`;
    departmentSelect.innerHTML = `<option value="">${translations.selectDepartment}</option>`;

    if (!branchId) {
        console.log('No branch ID provided, returning');
        return;
    }

    try {
        const url = `/organization/api/offices?branch_id=${branchId}`;
        console.log('Fetching offices from:', url);
        const response = await fetch(url);
        console.log('Offices API response status:', response.status);
        const data = await response.json();
        console.log('Offices API data:', data);

        if (data && Array.isArray(data)) {
            console.log('Found', data.length, 'offices');
            officeSelect.innerHTML = `<option value="">${translations.selectOffice}</option>` +
                data.map(office => {
                    console.log('Adding office:', office.office_name, 'ID:', office.office_id);
                    return `<option value="${office.office_id}">${office.office_name}</option>`;
                }).join('');
            console.log('Office select HTML:', officeSelect.innerHTML);
        } else {
            console.log('No offices data or not an array');
        }
    } catch (error) {
        console.error('Error loading offices:', error);
    }
}

// Load divisions by office (cascade)
async function loadDivisionsByOffice(officeId) {
    console.log('=== loadDivisionsByOffice called ===');
    console.log('Office ID:', officeId);

    const divisionSelect = document.getElementById('divisionSelect');
    const departmentSelect = document.getElementById('departmentSelect');

    // Reset child dropdowns
    divisionSelect.innerHTML = `<option value="">${translations.selectDivision}</option>`;
    departmentSelect.innerHTML = `<option value="">${translations.selectDepartment}</option>`;

    if (!officeId) {
        console.log('No office ID provided, returning');
        return;
    }

    try {
        const url = `/organization/api/divisions?office_id=${officeId}`;
        console.log('Fetching divisions from:', url);
        const response = await fetch(url);
        console.log('Divisions API response status:', response.status);
        const data = await response.json();
        console.log('Divisions API data:', data);

        if (data && Array.isArray(data)) {
            console.log('Found', data.length, 'divisions');
            divisionSelect.innerHTML = `<option value="">${translations.selectDivision}</option>` +
                data.map(division => {
                    console.log('Adding division:', division.division_name, 'ID:', division.division_id);
                    return `<option value="${division.division_id}">${division.division_name}</option>`;
                }).join('');
            console.log('Division select HTML:', divisionSelect.innerHTML);
        } else {
            console.log('No divisions data or not an array');
        }
    } catch (error) {
        console.error('Error loading divisions:', error);
    }
}

// Load departments by division (cascade)
async function loadDepartmentsByDivision(divisionId) {
    console.log('=== loadDepartmentsByDivision called ===');
    console.log('Division ID:', divisionId);

    const departmentSelect = document.getElementById('departmentSelect');

    // Reset dropdown
    departmentSelect.innerHTML = `<option value="">${translations.selectDepartment}</option>`;

    if (!divisionId) {
        console.log('No division ID provided, returning');
        return;
    }

    try {
        const url = `/organization/api/departments?division_id=${divisionId}`;
        console.log('Fetching departments from:', url);
        const response = await fetch(url);
        console.log('Departments API response status:', response.status);
        const data = await response.json();
        console.log('Departments API data:', data);

        if (data && Array.isArray(data)) {
            console.log('Found', data.length, 'departments');
            departmentSelect.innerHTML = `<option value="">${translations.selectDepartment}</option>` +
                data.map(department => {
                    console.log('Adding department:', department.department_name, 'ID:', department.department_id);
                    return `<option value="${department.department_id}">${department.department_name}</option>`;
                }).join('');
            console.log('Department select HTML:', departmentSelect.innerHTML);
        } else {
            console.log('No departments data or not an array');
        }
    } catch (error) {
        console.error('Error loading departments:', error);
    }
}

// Load positions
async function loadPositions() {
    console.log('=== loadPositions called ===');

    try {
        const url = '/organization/api/positions';
        console.log('Fetching positions from:', url);
        const response = await fetch(url);
        console.log('Positions API response status:', response.status);
        const data = await response.json();
        console.log('Positions API data:', data);

        const positionSelect = document.getElementById('addPositionSelect');
        const appliedPositionSelect = document.getElementById('appliedPositionSelect');
        console.log('Position select element:', positionSelect);
        console.log('Applied position select element:', appliedPositionSelect);

        if (data.success && data.positions) {
            console.log('Found', data.positions.length, 'positions');
            const positionsHTML = data.positions.map(pos => {
                console.log('Adding position:', pos.position_name_th || pos.position_name, 'ID:', pos.position_id);
                return `<option value="${pos.position_id}">${pos.position_name_th || pos.position_name}</option>`;
            }).join('');

            if (positionSelect) {
                positionSelect.innerHTML = `<option value="">${translations.selectPosition}</option>` + positionsHTML;
                console.log('Position select HTML:', positionSelect.innerHTML);
            } else {
                console.log('Position select element not found!');
            }

            // Load positions for applicants too
            if (appliedPositionSelect) {
                appliedPositionSelect.innerHTML = `<option value="">${translations.selectAppliedPosition}</option>` + positionsHTML;
                console.log('Applied position select HTML:', appliedPositionSelect.innerHTML);
            }
        } else {
            console.log('No positions data or data.success is false');
            console.log('data.success:', data.success);
            console.log('data.positions:', data.positions);
        }
    } catch (error) {
        console.error('Error loading positions:', error);
    }
}

// Setup profile image preview
function setupProfileImagePreview() {
    const profileInput = document.getElementById('profileImageInput');
    const profilePreview = document.getElementById('profilePreview');

    if (profileInput && profilePreview) {
        profileInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    profilePreview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }
}

// Handle user type change - Show/hide fields based on user type
function handleUserTypeChange() {
    const userType = document.getElementById('userTypeSelect').value;

    // Get all field elements
    const nameFields = document.getElementById('nameFields');
    const contactFields = document.getElementById('contactFields');
    const employeeIdField = document.getElementById('employeeIdField');
    const idCardField = document.getElementById('idCardField');
    const organizationSection = document.getElementById('organizationSection');
    const systemAccessSection = document.getElementById('systemAccessSection');
    const applicantSection = document.getElementById('applicantSection');

    // Get form inputs
    const firstNameInput = document.getElementById('firstNameInput');
    const lastNameInput = document.getElementById('lastNameInput');
    const emailInput = document.getElementById('emailInput');
    const phoneInput = document.getElementById('phoneInput');
    const employeeIdInput = document.getElementById('employeeIdInput');
    const idCardInput = document.getElementById('idCardInput');
    const departmentSelect = document.getElementById('departmentSelect');
    const positionSelect = document.getElementById('addPositionSelect');
    const roleSelect = document.getElementById('roleSelect');
    const passwordInput = document.getElementById('passwordInput');
    const confirmPasswordInput = document.getElementById('confirmPasswordInput');
    const appliedPositionSelect = document.getElementById('appliedPositionSelect');

    // Hide all sections and remove required first
    if (nameFields) nameFields.classList.add('hidden');
    if (contactFields) contactFields.classList.add('hidden');
    if (employeeIdField) employeeIdField.classList.add('hidden');
    if (idCardField) idCardField.classList.add('hidden');
    if (organizationSection) organizationSection.classList.add('hidden');
    if (systemAccessSection) systemAccessSection.classList.add('hidden');
    if (applicantSection) applicantSection.classList.add('hidden');

    // Remove all required attributes
    if (firstNameInput) firstNameInput.removeAttribute('required');
    if (lastNameInput) lastNameInput.removeAttribute('required');
    if (emailInput) emailInput.removeAttribute('required');
    if (phoneInput) phoneInput.removeAttribute('required');
    if (employeeIdInput) employeeIdInput.removeAttribute('required');
    if (idCardInput) idCardInput.removeAttribute('required');
    if (departmentSelect) departmentSelect.removeAttribute('required');
    if (positionSelect) positionSelect.removeAttribute('required');
    if (roleSelect) roleSelect.removeAttribute('required');
    if (passwordInput) passwordInput.removeAttribute('required');
    if (confirmPasswordInput) confirmPasswordInput.removeAttribute('required');
    if (appliedPositionSelect) appliedPositionSelect.removeAttribute('required');

    // Show relevant fields based on user type
    if (userType === 'employee') {
        // Show basic fields
        if (nameFields) nameFields.classList.remove('hidden');
        if (contactFields) contactFields.classList.remove('hidden');
        if (firstNameInput) firstNameInput.setAttribute('required', 'required');
        if (lastNameInput) lastNameInput.setAttribute('required', 'required');
        if (emailInput) emailInput.setAttribute('required', 'required');
        if (phoneInput) phoneInput.setAttribute('required', 'required');

        // Show Employee ID
        if (employeeIdField) employeeIdField.classList.remove('hidden');
        if (employeeIdInput) employeeIdInput.setAttribute('required', 'required');

        // Show organization section for employees
        if (organizationSection) organizationSection.classList.remove('hidden');
        if (departmentSelect) departmentSelect.setAttribute('required', 'required');
        if (positionSelect) positionSelect.setAttribute('required', 'required');

        // Show system access section for employees
        if (systemAccessSection) systemAccessSection.classList.remove('hidden');
        if (roleSelect) roleSelect.setAttribute('required', 'required');
        if (passwordInput) passwordInput.setAttribute('required', 'required');
        if (confirmPasswordInput) confirmPasswordInput.setAttribute('required', 'required');

    } else if (userType === 'applicant') {
        // Show basic fields
        if (nameFields) nameFields.classList.remove('hidden');
        if (contactFields) contactFields.classList.remove('hidden');
        if (firstNameInput) firstNameInput.setAttribute('required', 'required');
        if (lastNameInput) lastNameInput.setAttribute('required', 'required');
        if (emailInput) emailInput.setAttribute('required', 'required');
        if (phoneInput) phoneInput.setAttribute('required', 'required');

        // Show ID Card for applicants
        if (idCardField) idCardField.classList.remove('hidden');
        if (idCardInput) idCardInput.setAttribute('required', 'required');

        // Show applicant section
        if (applicantSection) applicantSection.classList.remove('hidden');
        if (appliedPositionSelect) appliedPositionSelect.setAttribute('required', 'required');
    }
}

// Handle user selection
function handleUserSelection(checkbox) {
    const userId = parseInt(checkbox.value);

    if (checkbox.checked) {
        selectedUsers.push(userId);
    } else {
        selectedUsers = selectedUsers.filter(id => id !== userId);
    }

    updateBulkActions();
}

// Handle select all
function handleSelectAll(e) {
    const checkboxes = document.querySelectorAll('.user-checkbox');

    checkboxes.forEach(checkbox => {
        checkbox.checked = e.target.checked;
        handleUserSelection(checkbox);
    });
}

// Update bulk actions
function updateBulkActions() {
    const bulkActionsDiv = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');

    selectedCount.textContent = selectedUsers.length;

    if (selectedUsers.length > 0) {
        bulkActionsDiv.classList.remove('hidden');
    } else {
        bulkActionsDiv.classList.add('hidden');
    }
}

// Clear selection
function clearSelection() {
    selectedUsers = [];
    document.getElementById('selectAll').checked = false;
    document.querySelectorAll('.user-checkbox').forEach(cb => cb.checked = false);
    updateBulkActions();
}

// Handle add user
async function handleAddUser(e) {
    e.preventDefault();

    try {
        const formData = new FormData(e.target);

        // Check password confirmation
        if (formData.get('password') !== formData.get('confirm_password')) {
            showMessage(translations.passwordMismatch, 'error');
            return;
        }

        const response = await fetch('/users/create', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.userAddedSuccess, 'success');
            closeAddModal();
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error adding user:', error);
        showMessage(translations.userAddError, 'error');
    }
}

// Edit user
async function editUser(userId) {
    try {
        const response = await fetch(`/users/api/${userId}`);
        const data = await response.json();

        if (data.success) {
            const user = data.user;

            document.getElementById('editUserId').value = user.user_id;
            document.getElementById('editFirstName').value = user.first_name || '';
            document.getElementById('editLastName').value = user.last_name || '';
            document.getElementById('editEmail').value = user.email || '';
            document.getElementById('editPhone').value = user.phone || '';
            document.getElementById('editRole').value = user.role || '';

            // Convert is_active to status format
            let status = 'inactive';
            if (user.is_active) {
                status = 'active';
            }
            document.getElementById('editStatus').value = status;

            document.getElementById('editUserModal').classList.remove('hidden');
        } else {
            showMessage(data.message || translations.errorLoadingUser, 'error');
        }
    } catch (error) {
        console.error('Error loading user:', error);
        showMessage(translations.errorLoadingUser, 'error');
    }
}

// Handle edit user
async function handleEditUser(e) {
    e.preventDefault();

    try {
        const formData = new FormData(e.target);
        const userId = formData.get('user_id');

        // Convert status back to is_active
        const status = formData.get('status');
        formData.delete('status');
        formData.append('is_active', status === 'active' ? true : false);

        const response = await fetch(`/users/api/${userId}`, {
            method: 'PUT',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.userEditedSuccess, 'success');
            closeEditModal();
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error editing user:', error);
        showMessage(translations.userEditError, 'error');
    }
}

// View user details
function viewUser(userId) {
    window.location.href = `/users/${userId}/view`;
}

// Suspend user
async function suspendUser(userId) {
    if (!confirm(translations.confirmSuspendUser)) return;

    try {
        const response = await fetch(`/users/api/${userId}/suspend`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.userSuspendedSuccess, 'success');
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error suspending user:', error);
        showMessage(translations.error, 'error');
    }
}

// Activate user
async function activateUser(userId) {
    try {
        const response = await fetch(`/users/api/${userId}/activate`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.userActivatedSuccess, 'success');
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error activating user:', error);
        showMessage(translations.error, 'error');
    }
}

// Delete user
async function deleteUser(userId) {
    if (!confirm(translations.confirmDeleteUser)) return;

    try {
        const response = await fetch(`/users/api/${userId}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.userDeletedSuccess, 'success');
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error deleting user:', error);
        showMessage(translations.error, 'error');
    }
}

// Handle bulk actions
async function handleBulkAction(action) {
    if (selectedUsers.length === 0) return;

    const actionText = {
        approve: translations.approveAction,
        suspend: translations.suspendAction,
        delete: translations.deleteAction
    };

    if (!confirm(translations.confirmBulkAction.replace('{action}', actionText[action]).replace('{count}', selectedUsers.length))) return;

    try {
        const response = await fetch(`/users/bulk/${action}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user_ids: selectedUsers })
        });

        const data = await response.json();

        if (data.success) {
            showMessage(translations.bulkActionSuccess.replace('{action}', actionText[action]), 'success');
            clearSelection();
            loadUsers();
        } else {
            showMessage(data.message || translations.error, 'error');
        }
    } catch (error) {
        console.error('Error performing bulk action:', error);
        showMessage(translations.error, 'error');
    }
}

// Export users
async function exportUsers() {
    try {
        const search = document.getElementById('searchUsers').value;
        const status = document.getElementById('statusFilter').value;
        const role = document.getElementById('roleFilter').value;
        const department = document.getElementById('departmentFilter').value;

        const params = new URLSearchParams({
            search,
            status,
            role,
            department,
            format: 'excel'
        });

        window.open(`/users/export?${params}`, '_blank');
    } catch (error) {
        console.error('Error exporting users:', error);
        showMessage(translations.exportError, 'error');
    }
}

// Close modals
function closeAddModal() {
    document.getElementById('addUserModal').classList.add('hidden');
    document.getElementById('addUserForm').reset();
}

function closeEditModal() {
    document.getElementById('editUserModal').classList.add('hidden');
    document.getElementById('editUserForm').reset();
}

// Update stats
function updateStats(stats) {
    document.getElementById('totalUsers').textContent = stats.total || 0;
    document.getElementById('activeUsers').textContent = stats.active || 0;
    document.getElementById('pendingUsers').textContent = stats.pending || 0;
    document.getElementById('newUsers').textContent = stats.new_this_month || 0;
}

// Update pagination
function updatePagination(pagination) {
    const container = document.getElementById('pagination');
    container.innerHTML = '';

    if (pagination.total_pages <= 1) return;

    // Previous button
    if (pagination.current_page > 1) {
        const prevBtn = document.createElement('button');
        prevBtn.className = 'px-3 py-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg';
        prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
        prevBtn.onclick = () => goToPage(pagination.current_page - 1);
        container.appendChild(prevBtn);
    }

    // Page numbers
    for (let i = Math.max(1, pagination.current_page - 2);
         i <= Math.min(pagination.total_pages, pagination.current_page + 2); i++) {
        const pageBtn = document.createElement('button');
        pageBtn.className = i === pagination.current_page
            ? 'px-3 py-2 bg-ruxchai-primary text-white rounded-lg'
            : 'px-3 py-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg';
        pageBtn.textContent = i;
        pageBtn.onclick = () => goToPage(i);
        container.appendChild(pageBtn);
    }

    // Next button
    if (pagination.current_page < pagination.total_pages) {
        const nextBtn = document.createElement('button');
        nextBtn.className = 'px-3 py-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg';
        nextBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
        nextBtn.onclick = () => goToPage(pagination.current_page + 1);
        container.appendChild(nextBtn);
    }
}

// Go to page
function goToPage(page) {
    currentPage = page;
    loadUsers();
}

// Utility functions
function formatDate(dateString) {
    const options = {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('th-TH', options);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function showMessage(message, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white ${
        type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    messageDiv.textContent = message;

    document.body.appendChild(messageDiv);

    setTimeout(() => {
        messageDiv.remove();
    }, 3000);
}
</script>